// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpcpb

import (
	context "context"
	clientpb "github.com/bishopfox/sliver/protobuf/clientpb"
	commonpb "github.com/bishopfox/sliver/protobuf/commonpb"
	sliverpb "github.com/bishopfox/sliver/protobuf/sliverpb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SliverRPCClient is the client API for SliverRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SliverRPCClient interface {
	// *** Version ***
	GetVersion(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.Version, error)
	// *** Operator Commands ***
	GetOperators(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.Operators, error)
	// *** Generic ***
	Kill(ctx context.Context, in *sliverpb.KillReq, opts ...grpc.CallOption) (*commonpb.Empty, error)
	// *** Sessions ***
	GetSessions(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.Sessions, error)
	UpdateSession(ctx context.Context, in *clientpb.UpdateSession, opts ...grpc.CallOption) (*clientpb.Session, error)
	// *** Beacons ***
	GetBeacons(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.Beacons, error)
	GetBeacon(ctx context.Context, in *clientpb.Beacon, opts ...grpc.CallOption) (*clientpb.Beacon, error)
	RmBeacon(ctx context.Context, in *clientpb.Beacon, opts ...grpc.CallOption) (*commonpb.Empty, error)
	GetBeaconTasks(ctx context.Context, in *clientpb.Beacon, opts ...grpc.CallOption) (*clientpb.BeaconTasks, error)
	GetBeaconTaskContent(ctx context.Context, in *clientpb.BeaconTask, opts ...grpc.CallOption) (*clientpb.BeaconTask, error)
	// ***Threat monitoring ***
	MonitorStart(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*commonpb.Response, error)
	MonitorStop(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*commonpb.Empty, error)
	// *** Jobs ***
	GetJobs(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.Jobs, error)
	KillJob(ctx context.Context, in *clientpb.KillJobReq, opts ...grpc.CallOption) (*clientpb.KillJob, error)
	// *** Listeners ***
	StartMTLSListener(ctx context.Context, in *clientpb.MTLSListenerReq, opts ...grpc.CallOption) (*clientpb.MTLSListener, error)
	StartWGListener(ctx context.Context, in *clientpb.WGListenerReq, opts ...grpc.CallOption) (*clientpb.WGListener, error)
	StartDNSListener(ctx context.Context, in *clientpb.DNSListenerReq, opts ...grpc.CallOption) (*clientpb.DNSListener, error)
	StartHTTPSListener(ctx context.Context, in *clientpb.HTTPListenerReq, opts ...grpc.CallOption) (*clientpb.HTTPListener, error)
	StartHTTPListener(ctx context.Context, in *clientpb.HTTPListenerReq, opts ...grpc.CallOption) (*clientpb.HTTPListener, error)
	// *** Stager Listener ***
	StartTCPStagerListener(ctx context.Context, in *clientpb.StagerListenerReq, opts ...grpc.CallOption) (*clientpb.StagerListener, error)
	StartHTTPStagerListener(ctx context.Context, in *clientpb.StagerListenerReq, opts ...grpc.CallOption) (*clientpb.StagerListener, error)
	// *** Loot ***
	LootAdd(ctx context.Context, in *clientpb.Loot, opts ...grpc.CallOption) (*clientpb.Loot, error)
	LootRm(ctx context.Context, in *clientpb.Loot, opts ...grpc.CallOption) (*commonpb.Empty, error)
	LootUpdate(ctx context.Context, in *clientpb.Loot, opts ...grpc.CallOption) (*clientpb.Loot, error)
	LootContent(ctx context.Context, in *clientpb.Loot, opts ...grpc.CallOption) (*clientpb.Loot, error)
	LootAll(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.AllLoot, error)
	LootAllOf(ctx context.Context, in *clientpb.Loot, opts ...grpc.CallOption) (*clientpb.AllLoot, error)
	// *** Hosts ***
	Hosts(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.AllHosts, error)
	Host(ctx context.Context, in *clientpb.Host, opts ...grpc.CallOption) (*clientpb.Host, error)
	HostRm(ctx context.Context, in *clientpb.Host, opts ...grpc.CallOption) (*commonpb.Empty, error)
	HostIOCRm(ctx context.Context, in *clientpb.IOC, opts ...grpc.CallOption) (*commonpb.Empty, error)
	// *** Implants ***
	Generate(ctx context.Context, in *clientpb.GenerateReq, opts ...grpc.CallOption) (*clientpb.Generate, error)
	Regenerate(ctx context.Context, in *clientpb.RegenerateReq, opts ...grpc.CallOption) (*clientpb.Generate, error)
	ImplantBuilds(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.ImplantBuilds, error)
	DeleteImplantBuild(ctx context.Context, in *clientpb.DeleteReq, opts ...grpc.CallOption) (*commonpb.Empty, error)
	Canaries(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.Canaries, error)
	GenerateWGClientConfig(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.WGClientConfig, error)
	GenerateUniqueIP(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.UniqueWGIP, error)
	ImplantProfiles(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.ImplantProfiles, error)
	DeleteImplantProfile(ctx context.Context, in *clientpb.DeleteReq, opts ...grpc.CallOption) (*commonpb.Empty, error)
	SaveImplantProfile(ctx context.Context, in *clientpb.ImplantProfile, opts ...grpc.CallOption) (*clientpb.ImplantProfile, error)
	MsfStage(ctx context.Context, in *clientpb.MsfStagerReq, opts ...grpc.CallOption) (*clientpb.MsfStager, error)
	ShellcodeRDI(ctx context.Context, in *clientpb.ShellcodeRDIReq, opts ...grpc.CallOption) (*clientpb.ShellcodeRDI, error)
	GetCompiler(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.Compiler, error)
	// *** Websites ***
	Websites(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.Websites, error)
	Website(ctx context.Context, in *clientpb.Website, opts ...grpc.CallOption) (*clientpb.Website, error)
	WebsiteRemove(ctx context.Context, in *clientpb.Website, opts ...grpc.CallOption) (*commonpb.Empty, error)
	WebsiteAddContent(ctx context.Context, in *clientpb.WebsiteAddContent, opts ...grpc.CallOption) (*clientpb.Website, error)
	WebsiteUpdateContent(ctx context.Context, in *clientpb.WebsiteAddContent, opts ...grpc.CallOption) (*clientpb.Website, error)
	WebsiteRemoveContent(ctx context.Context, in *clientpb.WebsiteRemoveContent, opts ...grpc.CallOption) (*clientpb.Website, error)
	// *** Session Interactions ***
	Ping(ctx context.Context, in *sliverpb.Ping, opts ...grpc.CallOption) (*sliverpb.Ping, error)
	Ps(ctx context.Context, in *sliverpb.PsReq, opts ...grpc.CallOption) (*sliverpb.Ps, error)
	Terminate(ctx context.Context, in *sliverpb.TerminateReq, opts ...grpc.CallOption) (*sliverpb.Terminate, error)
	Ifconfig(ctx context.Context, in *sliverpb.IfconfigReq, opts ...grpc.CallOption) (*sliverpb.Ifconfig, error)
	Netstat(ctx context.Context, in *sliverpb.NetstatReq, opts ...grpc.CallOption) (*sliverpb.Netstat, error)
	Ls(ctx context.Context, in *sliverpb.LsReq, opts ...grpc.CallOption) (*sliverpb.Ls, error)
	Cd(ctx context.Context, in *sliverpb.CdReq, opts ...grpc.CallOption) (*sliverpb.Pwd, error)
	Pwd(ctx context.Context, in *sliverpb.PwdReq, opts ...grpc.CallOption) (*sliverpb.Pwd, error)
	Rm(ctx context.Context, in *sliverpb.RmReq, opts ...grpc.CallOption) (*sliverpb.Rm, error)
	Mkdir(ctx context.Context, in *sliverpb.MkdirReq, opts ...grpc.CallOption) (*sliverpb.Mkdir, error)
	Download(ctx context.Context, in *sliverpb.DownloadReq, opts ...grpc.CallOption) (*sliverpb.Download, error)
	Upload(ctx context.Context, in *sliverpb.UploadReq, opts ...grpc.CallOption) (*sliverpb.Upload, error)
	ProcessDump(ctx context.Context, in *sliverpb.ProcessDumpReq, opts ...grpc.CallOption) (*sliverpb.ProcessDump, error)
	RunAs(ctx context.Context, in *sliverpb.RunAsReq, opts ...grpc.CallOption) (*sliverpb.RunAs, error)
	Impersonate(ctx context.Context, in *sliverpb.ImpersonateReq, opts ...grpc.CallOption) (*sliverpb.Impersonate, error)
	RevToSelf(ctx context.Context, in *sliverpb.RevToSelfReq, opts ...grpc.CallOption) (*sliverpb.RevToSelf, error)
	GetSystem(ctx context.Context, in *clientpb.GetSystemReq, opts ...grpc.CallOption) (*sliverpb.GetSystem, error)
	Task(ctx context.Context, in *sliverpb.TaskReq, opts ...grpc.CallOption) (*sliverpb.Task, error)
	Msf(ctx context.Context, in *clientpb.MSFReq, opts ...grpc.CallOption) (*sliverpb.Task, error)
	MsfRemote(ctx context.Context, in *clientpb.MSFRemoteReq, opts ...grpc.CallOption) (*sliverpb.Task, error)
	ExecuteAssembly(ctx context.Context, in *sliverpb.ExecuteAssemblyReq, opts ...grpc.CallOption) (*sliverpb.ExecuteAssembly, error)
	Migrate(ctx context.Context, in *clientpb.MigrateReq, opts ...grpc.CallOption) (*sliverpb.Migrate, error)
	Execute(ctx context.Context, in *sliverpb.ExecuteReq, opts ...grpc.CallOption) (*sliverpb.Execute, error)
	ExecuteToken(ctx context.Context, in *sliverpb.ExecuteTokenReq, opts ...grpc.CallOption) (*sliverpb.Execute, error)
	Sideload(ctx context.Context, in *sliverpb.SideloadReq, opts ...grpc.CallOption) (*sliverpb.Sideload, error)
	SpawnDll(ctx context.Context, in *sliverpb.InvokeSpawnDllReq, opts ...grpc.CallOption) (*sliverpb.SpawnDll, error)
	Screenshot(ctx context.Context, in *sliverpb.ScreenshotReq, opts ...grpc.CallOption) (*sliverpb.Screenshot, error)
	// *** Pivots ***
	PivotStartListener(ctx context.Context, in *sliverpb.PivotStartListenerReq, opts ...grpc.CallOption) (*sliverpb.PivotListener, error)
	PivotStopListener(ctx context.Context, in *sliverpb.PivotStopListenerReq, opts ...grpc.CallOption) (*commonpb.Empty, error)
	PivotSessionListeners(ctx context.Context, in *sliverpb.PivotListenersReq, opts ...grpc.CallOption) (*sliverpb.PivotListeners, error)
	PivotGraph(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.PivotGraph, error)
	StartService(ctx context.Context, in *sliverpb.StartServiceReq, opts ...grpc.CallOption) (*sliverpb.ServiceInfo, error)
	StopService(ctx context.Context, in *sliverpb.StopServiceReq, opts ...grpc.CallOption) (*sliverpb.ServiceInfo, error)
	RemoveService(ctx context.Context, in *sliverpb.RemoveServiceReq, opts ...grpc.CallOption) (*sliverpb.ServiceInfo, error)
	MakeToken(ctx context.Context, in *sliverpb.MakeTokenReq, opts ...grpc.CallOption) (*sliverpb.MakeToken, error)
	GetEnv(ctx context.Context, in *sliverpb.EnvReq, opts ...grpc.CallOption) (*sliverpb.EnvInfo, error)
	SetEnv(ctx context.Context, in *sliverpb.SetEnvReq, opts ...grpc.CallOption) (*sliverpb.SetEnv, error)
	UnsetEnv(ctx context.Context, in *sliverpb.UnsetEnvReq, opts ...grpc.CallOption) (*sliverpb.UnsetEnv, error)
	Backdoor(ctx context.Context, in *sliverpb.BackdoorReq, opts ...grpc.CallOption) (*sliverpb.Backdoor, error)
	RegistryRead(ctx context.Context, in *sliverpb.RegistryReadReq, opts ...grpc.CallOption) (*sliverpb.RegistryRead, error)
	RegistryWrite(ctx context.Context, in *sliverpb.RegistryWriteReq, opts ...grpc.CallOption) (*sliverpb.RegistryWrite, error)
	RegistryCreateKey(ctx context.Context, in *sliverpb.RegistryCreateKeyReq, opts ...grpc.CallOption) (*sliverpb.RegistryCreateKey, error)
	RegistryDeleteKey(ctx context.Context, in *sliverpb.RegistryDeleteKeyReq, opts ...grpc.CallOption) (*sliverpb.RegistryDeleteKey, error)
	RegistryListSubKeys(ctx context.Context, in *sliverpb.RegistrySubKeyListReq, opts ...grpc.CallOption) (*sliverpb.RegistrySubKeyList, error)
	RegistryListValues(ctx context.Context, in *sliverpb.RegistryListValuesReq, opts ...grpc.CallOption) (*sliverpb.RegistryValuesList, error)
	RunSSHCommand(ctx context.Context, in *sliverpb.SSHCommandReq, opts ...grpc.CallOption) (*sliverpb.SSHCommand, error)
	HijackDLL(ctx context.Context, in *clientpb.DllHijackReq, opts ...grpc.CallOption) (*clientpb.DllHijack, error)
	GetPrivs(ctx context.Context, in *sliverpb.GetPrivsReq, opts ...grpc.CallOption) (*sliverpb.GetPrivs, error)
	// Beacon only commands
	OpenSession(ctx context.Context, in *sliverpb.OpenSession, opts ...grpc.CallOption) (*sliverpb.OpenSession, error)
	CloseSession(ctx context.Context, in *sliverpb.CloseSession, opts ...grpc.CallOption) (*commonpb.Empty, error)
	// Extensions
	RegisterExtension(ctx context.Context, in *sliverpb.RegisterExtensionReq, opts ...grpc.CallOption) (*sliverpb.RegisterExtension, error)
	CallExtension(ctx context.Context, in *sliverpb.CallExtensionReq, opts ...grpc.CallOption) (*sliverpb.CallExtension, error)
	ListExtensions(ctx context.Context, in *sliverpb.ListExtensionsReq, opts ...grpc.CallOption) (*sliverpb.ListExtensions, error)
	// *** Wireguard Specific ***
	WGStartPortForward(ctx context.Context, in *sliverpb.WGPortForwardStartReq, opts ...grpc.CallOption) (*sliverpb.WGPortForward, error)
	WGStopPortForward(ctx context.Context, in *sliverpb.WGPortForwardStopReq, opts ...grpc.CallOption) (*sliverpb.WGPortForward, error)
	WGStartSocks(ctx context.Context, in *sliverpb.WGSocksStartReq, opts ...grpc.CallOption) (*sliverpb.WGSocks, error)
	WGStopSocks(ctx context.Context, in *sliverpb.WGSocksStopReq, opts ...grpc.CallOption) (*sliverpb.WGSocks, error)
	WGListForwarders(ctx context.Context, in *sliverpb.WGTCPForwardersReq, opts ...grpc.CallOption) (*sliverpb.WGTCPForwarders, error)
	WGListSocksServers(ctx context.Context, in *sliverpb.WGSocksServersReq, opts ...grpc.CallOption) (*sliverpb.WGSocksServers, error)
	// *** Realtime Commands ***
	Shell(ctx context.Context, in *sliverpb.ShellReq, opts ...grpc.CallOption) (*sliverpb.Shell, error)
	Portfwd(ctx context.Context, in *sliverpb.PortfwdReq, opts ...grpc.CallOption) (*sliverpb.Portfwd, error)
	// *** Socks5 ***
	CreateSocks(ctx context.Context, in *sliverpb.Socks, opts ...grpc.CallOption) (*sliverpb.Socks, error)
	CloseSocks(ctx context.Context, in *sliverpb.Socks, opts ...grpc.CallOption) (*commonpb.Empty, error)
	SocksProxy(ctx context.Context, opts ...grpc.CallOption) (SliverRPC_SocksProxyClient, error)
	// *** Tunnels ***
	CreateTunnel(ctx context.Context, in *sliverpb.Tunnel, opts ...grpc.CallOption) (*sliverpb.Tunnel, error)
	CloseTunnel(ctx context.Context, in *sliverpb.Tunnel, opts ...grpc.CallOption) (*commonpb.Empty, error)
	TunnelData(ctx context.Context, opts ...grpc.CallOption) (SliverRPC_TunnelDataClient, error)
	// *** Events ***
	Events(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (SliverRPC_EventsClient, error)
}

type sliverRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewSliverRPCClient(cc grpc.ClientConnInterface) SliverRPCClient {
	return &sliverRPCClient{cc}
}

func (c *sliverRPCClient) GetVersion(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.Version, error) {
	out := new(clientpb.Version)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) GetOperators(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.Operators, error) {
	out := new(clientpb.Operators)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/GetOperators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) Kill(ctx context.Context, in *sliverpb.KillReq, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/Kill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) GetSessions(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.Sessions, error) {
	out := new(clientpb.Sessions)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/GetSessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) UpdateSession(ctx context.Context, in *clientpb.UpdateSession, opts ...grpc.CallOption) (*clientpb.Session, error) {
	out := new(clientpb.Session)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/UpdateSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) GetBeacons(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.Beacons, error) {
	out := new(clientpb.Beacons)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/GetBeacons", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) GetBeacon(ctx context.Context, in *clientpb.Beacon, opts ...grpc.CallOption) (*clientpb.Beacon, error) {
	out := new(clientpb.Beacon)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/GetBeacon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) RmBeacon(ctx context.Context, in *clientpb.Beacon, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/RmBeacon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) GetBeaconTasks(ctx context.Context, in *clientpb.Beacon, opts ...grpc.CallOption) (*clientpb.BeaconTasks, error) {
	out := new(clientpb.BeaconTasks)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/GetBeaconTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) GetBeaconTaskContent(ctx context.Context, in *clientpb.BeaconTask, opts ...grpc.CallOption) (*clientpb.BeaconTask, error) {
	out := new(clientpb.BeaconTask)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/GetBeaconTaskContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) MonitorStart(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*commonpb.Response, error) {
	out := new(commonpb.Response)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/MonitorStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) MonitorStop(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/MonitorStop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) GetJobs(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.Jobs, error) {
	out := new(clientpb.Jobs)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/GetJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) KillJob(ctx context.Context, in *clientpb.KillJobReq, opts ...grpc.CallOption) (*clientpb.KillJob, error) {
	out := new(clientpb.KillJob)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/KillJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) StartMTLSListener(ctx context.Context, in *clientpb.MTLSListenerReq, opts ...grpc.CallOption) (*clientpb.MTLSListener, error) {
	out := new(clientpb.MTLSListener)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/StartMTLSListener", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) StartWGListener(ctx context.Context, in *clientpb.WGListenerReq, opts ...grpc.CallOption) (*clientpb.WGListener, error) {
	out := new(clientpb.WGListener)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/StartWGListener", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) StartDNSListener(ctx context.Context, in *clientpb.DNSListenerReq, opts ...grpc.CallOption) (*clientpb.DNSListener, error) {
	out := new(clientpb.DNSListener)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/StartDNSListener", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) StartHTTPSListener(ctx context.Context, in *clientpb.HTTPListenerReq, opts ...grpc.CallOption) (*clientpb.HTTPListener, error) {
	out := new(clientpb.HTTPListener)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/StartHTTPSListener", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) StartHTTPListener(ctx context.Context, in *clientpb.HTTPListenerReq, opts ...grpc.CallOption) (*clientpb.HTTPListener, error) {
	out := new(clientpb.HTTPListener)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/StartHTTPListener", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) StartTCPStagerListener(ctx context.Context, in *clientpb.StagerListenerReq, opts ...grpc.CallOption) (*clientpb.StagerListener, error) {
	out := new(clientpb.StagerListener)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/StartTCPStagerListener", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) StartHTTPStagerListener(ctx context.Context, in *clientpb.StagerListenerReq, opts ...grpc.CallOption) (*clientpb.StagerListener, error) {
	out := new(clientpb.StagerListener)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/StartHTTPStagerListener", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) LootAdd(ctx context.Context, in *clientpb.Loot, opts ...grpc.CallOption) (*clientpb.Loot, error) {
	out := new(clientpb.Loot)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/LootAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) LootRm(ctx context.Context, in *clientpb.Loot, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/LootRm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) LootUpdate(ctx context.Context, in *clientpb.Loot, opts ...grpc.CallOption) (*clientpb.Loot, error) {
	out := new(clientpb.Loot)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/LootUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) LootContent(ctx context.Context, in *clientpb.Loot, opts ...grpc.CallOption) (*clientpb.Loot, error) {
	out := new(clientpb.Loot)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/LootContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) LootAll(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.AllLoot, error) {
	out := new(clientpb.AllLoot)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/LootAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) LootAllOf(ctx context.Context, in *clientpb.Loot, opts ...grpc.CallOption) (*clientpb.AllLoot, error) {
	out := new(clientpb.AllLoot)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/LootAllOf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) Hosts(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.AllHosts, error) {
	out := new(clientpb.AllHosts)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/Hosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) Host(ctx context.Context, in *clientpb.Host, opts ...grpc.CallOption) (*clientpb.Host, error) {
	out := new(clientpb.Host)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/Host", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) HostRm(ctx context.Context, in *clientpb.Host, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/HostRm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) HostIOCRm(ctx context.Context, in *clientpb.IOC, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/HostIOCRm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) Generate(ctx context.Context, in *clientpb.GenerateReq, opts ...grpc.CallOption) (*clientpb.Generate, error) {
	out := new(clientpb.Generate)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/Generate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) Regenerate(ctx context.Context, in *clientpb.RegenerateReq, opts ...grpc.CallOption) (*clientpb.Generate, error) {
	out := new(clientpb.Generate)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/Regenerate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) ImplantBuilds(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.ImplantBuilds, error) {
	out := new(clientpb.ImplantBuilds)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/ImplantBuilds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) DeleteImplantBuild(ctx context.Context, in *clientpb.DeleteReq, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/DeleteImplantBuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) Canaries(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.Canaries, error) {
	out := new(clientpb.Canaries)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/Canaries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) GenerateWGClientConfig(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.WGClientConfig, error) {
	out := new(clientpb.WGClientConfig)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/GenerateWGClientConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) GenerateUniqueIP(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.UniqueWGIP, error) {
	out := new(clientpb.UniqueWGIP)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/GenerateUniqueIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) ImplantProfiles(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.ImplantProfiles, error) {
	out := new(clientpb.ImplantProfiles)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/ImplantProfiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) DeleteImplantProfile(ctx context.Context, in *clientpb.DeleteReq, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/DeleteImplantProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) SaveImplantProfile(ctx context.Context, in *clientpb.ImplantProfile, opts ...grpc.CallOption) (*clientpb.ImplantProfile, error) {
	out := new(clientpb.ImplantProfile)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/SaveImplantProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) MsfStage(ctx context.Context, in *clientpb.MsfStagerReq, opts ...grpc.CallOption) (*clientpb.MsfStager, error) {
	out := new(clientpb.MsfStager)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/MsfStage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) ShellcodeRDI(ctx context.Context, in *clientpb.ShellcodeRDIReq, opts ...grpc.CallOption) (*clientpb.ShellcodeRDI, error) {
	out := new(clientpb.ShellcodeRDI)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/ShellcodeRDI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) GetCompiler(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.Compiler, error) {
	out := new(clientpb.Compiler)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/GetCompiler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) Websites(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.Websites, error) {
	out := new(clientpb.Websites)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/Websites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) Website(ctx context.Context, in *clientpb.Website, opts ...grpc.CallOption) (*clientpb.Website, error) {
	out := new(clientpb.Website)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/Website", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) WebsiteRemove(ctx context.Context, in *clientpb.Website, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/WebsiteRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) WebsiteAddContent(ctx context.Context, in *clientpb.WebsiteAddContent, opts ...grpc.CallOption) (*clientpb.Website, error) {
	out := new(clientpb.Website)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/WebsiteAddContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) WebsiteUpdateContent(ctx context.Context, in *clientpb.WebsiteAddContent, opts ...grpc.CallOption) (*clientpb.Website, error) {
	out := new(clientpb.Website)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/WebsiteUpdateContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) WebsiteRemoveContent(ctx context.Context, in *clientpb.WebsiteRemoveContent, opts ...grpc.CallOption) (*clientpb.Website, error) {
	out := new(clientpb.Website)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/WebsiteRemoveContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) Ping(ctx context.Context, in *sliverpb.Ping, opts ...grpc.CallOption) (*sliverpb.Ping, error) {
	out := new(sliverpb.Ping)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) Ps(ctx context.Context, in *sliverpb.PsReq, opts ...grpc.CallOption) (*sliverpb.Ps, error) {
	out := new(sliverpb.Ps)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/Ps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) Terminate(ctx context.Context, in *sliverpb.TerminateReq, opts ...grpc.CallOption) (*sliverpb.Terminate, error) {
	out := new(sliverpb.Terminate)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/Terminate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) Ifconfig(ctx context.Context, in *sliverpb.IfconfigReq, opts ...grpc.CallOption) (*sliverpb.Ifconfig, error) {
	out := new(sliverpb.Ifconfig)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/Ifconfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) Netstat(ctx context.Context, in *sliverpb.NetstatReq, opts ...grpc.CallOption) (*sliverpb.Netstat, error) {
	out := new(sliverpb.Netstat)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/Netstat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) Ls(ctx context.Context, in *sliverpb.LsReq, opts ...grpc.CallOption) (*sliverpb.Ls, error) {
	out := new(sliverpb.Ls)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/Ls", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) Cd(ctx context.Context, in *sliverpb.CdReq, opts ...grpc.CallOption) (*sliverpb.Pwd, error) {
	out := new(sliverpb.Pwd)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/Cd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) Pwd(ctx context.Context, in *sliverpb.PwdReq, opts ...grpc.CallOption) (*sliverpb.Pwd, error) {
	out := new(sliverpb.Pwd)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/Pwd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) Rm(ctx context.Context, in *sliverpb.RmReq, opts ...grpc.CallOption) (*sliverpb.Rm, error) {
	out := new(sliverpb.Rm)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/Rm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) Mkdir(ctx context.Context, in *sliverpb.MkdirReq, opts ...grpc.CallOption) (*sliverpb.Mkdir, error) {
	out := new(sliverpb.Mkdir)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/Mkdir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) Download(ctx context.Context, in *sliverpb.DownloadReq, opts ...grpc.CallOption) (*sliverpb.Download, error) {
	out := new(sliverpb.Download)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/Download", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) Upload(ctx context.Context, in *sliverpb.UploadReq, opts ...grpc.CallOption) (*sliverpb.Upload, error) {
	out := new(sliverpb.Upload)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/Upload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) ProcessDump(ctx context.Context, in *sliverpb.ProcessDumpReq, opts ...grpc.CallOption) (*sliverpb.ProcessDump, error) {
	out := new(sliverpb.ProcessDump)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/ProcessDump", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) RunAs(ctx context.Context, in *sliverpb.RunAsReq, opts ...grpc.CallOption) (*sliverpb.RunAs, error) {
	out := new(sliverpb.RunAs)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/RunAs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) Impersonate(ctx context.Context, in *sliverpb.ImpersonateReq, opts ...grpc.CallOption) (*sliverpb.Impersonate, error) {
	out := new(sliverpb.Impersonate)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/Impersonate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) RevToSelf(ctx context.Context, in *sliverpb.RevToSelfReq, opts ...grpc.CallOption) (*sliverpb.RevToSelf, error) {
	out := new(sliverpb.RevToSelf)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/RevToSelf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) GetSystem(ctx context.Context, in *clientpb.GetSystemReq, opts ...grpc.CallOption) (*sliverpb.GetSystem, error) {
	out := new(sliverpb.GetSystem)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/GetSystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) Task(ctx context.Context, in *sliverpb.TaskReq, opts ...grpc.CallOption) (*sliverpb.Task, error) {
	out := new(sliverpb.Task)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/Task", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) Msf(ctx context.Context, in *clientpb.MSFReq, opts ...grpc.CallOption) (*sliverpb.Task, error) {
	out := new(sliverpb.Task)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/Msf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) MsfRemote(ctx context.Context, in *clientpb.MSFRemoteReq, opts ...grpc.CallOption) (*sliverpb.Task, error) {
	out := new(sliverpb.Task)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/MsfRemote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) ExecuteAssembly(ctx context.Context, in *sliverpb.ExecuteAssemblyReq, opts ...grpc.CallOption) (*sliverpb.ExecuteAssembly, error) {
	out := new(sliverpb.ExecuteAssembly)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/ExecuteAssembly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) Migrate(ctx context.Context, in *clientpb.MigrateReq, opts ...grpc.CallOption) (*sliverpb.Migrate, error) {
	out := new(sliverpb.Migrate)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/Migrate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) Execute(ctx context.Context, in *sliverpb.ExecuteReq, opts ...grpc.CallOption) (*sliverpb.Execute, error) {
	out := new(sliverpb.Execute)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/Execute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) ExecuteToken(ctx context.Context, in *sliverpb.ExecuteTokenReq, opts ...grpc.CallOption) (*sliverpb.Execute, error) {
	out := new(sliverpb.Execute)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/ExecuteToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) Sideload(ctx context.Context, in *sliverpb.SideloadReq, opts ...grpc.CallOption) (*sliverpb.Sideload, error) {
	out := new(sliverpb.Sideload)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/Sideload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) SpawnDll(ctx context.Context, in *sliverpb.InvokeSpawnDllReq, opts ...grpc.CallOption) (*sliverpb.SpawnDll, error) {
	out := new(sliverpb.SpawnDll)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/SpawnDll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) Screenshot(ctx context.Context, in *sliverpb.ScreenshotReq, opts ...grpc.CallOption) (*sliverpb.Screenshot, error) {
	out := new(sliverpb.Screenshot)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/Screenshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) PivotStartListener(ctx context.Context, in *sliverpb.PivotStartListenerReq, opts ...grpc.CallOption) (*sliverpb.PivotListener, error) {
	out := new(sliverpb.PivotListener)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/PivotStartListener", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) PivotStopListener(ctx context.Context, in *sliverpb.PivotStopListenerReq, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/PivotStopListener", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) PivotSessionListeners(ctx context.Context, in *sliverpb.PivotListenersReq, opts ...grpc.CallOption) (*sliverpb.PivotListeners, error) {
	out := new(sliverpb.PivotListeners)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/PivotSessionListeners", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) PivotGraph(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.PivotGraph, error) {
	out := new(clientpb.PivotGraph)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/PivotGraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) StartService(ctx context.Context, in *sliverpb.StartServiceReq, opts ...grpc.CallOption) (*sliverpb.ServiceInfo, error) {
	out := new(sliverpb.ServiceInfo)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/StartService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) StopService(ctx context.Context, in *sliverpb.StopServiceReq, opts ...grpc.CallOption) (*sliverpb.ServiceInfo, error) {
	out := new(sliverpb.ServiceInfo)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/StopService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) RemoveService(ctx context.Context, in *sliverpb.RemoveServiceReq, opts ...grpc.CallOption) (*sliverpb.ServiceInfo, error) {
	out := new(sliverpb.ServiceInfo)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/RemoveService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) MakeToken(ctx context.Context, in *sliverpb.MakeTokenReq, opts ...grpc.CallOption) (*sliverpb.MakeToken, error) {
	out := new(sliverpb.MakeToken)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/MakeToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) GetEnv(ctx context.Context, in *sliverpb.EnvReq, opts ...grpc.CallOption) (*sliverpb.EnvInfo, error) {
	out := new(sliverpb.EnvInfo)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/GetEnv", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) SetEnv(ctx context.Context, in *sliverpb.SetEnvReq, opts ...grpc.CallOption) (*sliverpb.SetEnv, error) {
	out := new(sliverpb.SetEnv)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/SetEnv", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) UnsetEnv(ctx context.Context, in *sliverpb.UnsetEnvReq, opts ...grpc.CallOption) (*sliverpb.UnsetEnv, error) {
	out := new(sliverpb.UnsetEnv)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/UnsetEnv", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) Backdoor(ctx context.Context, in *sliverpb.BackdoorReq, opts ...grpc.CallOption) (*sliverpb.Backdoor, error) {
	out := new(sliverpb.Backdoor)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/Backdoor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) RegistryRead(ctx context.Context, in *sliverpb.RegistryReadReq, opts ...grpc.CallOption) (*sliverpb.RegistryRead, error) {
	out := new(sliverpb.RegistryRead)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/RegistryRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) RegistryWrite(ctx context.Context, in *sliverpb.RegistryWriteReq, opts ...grpc.CallOption) (*sliverpb.RegistryWrite, error) {
	out := new(sliverpb.RegistryWrite)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/RegistryWrite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) RegistryCreateKey(ctx context.Context, in *sliverpb.RegistryCreateKeyReq, opts ...grpc.CallOption) (*sliverpb.RegistryCreateKey, error) {
	out := new(sliverpb.RegistryCreateKey)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/RegistryCreateKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) RegistryDeleteKey(ctx context.Context, in *sliverpb.RegistryDeleteKeyReq, opts ...grpc.CallOption) (*sliverpb.RegistryDeleteKey, error) {
	out := new(sliverpb.RegistryDeleteKey)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/RegistryDeleteKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) RegistryListSubKeys(ctx context.Context, in *sliverpb.RegistrySubKeyListReq, opts ...grpc.CallOption) (*sliverpb.RegistrySubKeyList, error) {
	out := new(sliverpb.RegistrySubKeyList)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/RegistryListSubKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) RegistryListValues(ctx context.Context, in *sliverpb.RegistryListValuesReq, opts ...grpc.CallOption) (*sliverpb.RegistryValuesList, error) {
	out := new(sliverpb.RegistryValuesList)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/RegistryListValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) RunSSHCommand(ctx context.Context, in *sliverpb.SSHCommandReq, opts ...grpc.CallOption) (*sliverpb.SSHCommand, error) {
	out := new(sliverpb.SSHCommand)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/RunSSHCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) HijackDLL(ctx context.Context, in *clientpb.DllHijackReq, opts ...grpc.CallOption) (*clientpb.DllHijack, error) {
	out := new(clientpb.DllHijack)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/HijackDLL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) GetPrivs(ctx context.Context, in *sliverpb.GetPrivsReq, opts ...grpc.CallOption) (*sliverpb.GetPrivs, error) {
	out := new(sliverpb.GetPrivs)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/GetPrivs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) OpenSession(ctx context.Context, in *sliverpb.OpenSession, opts ...grpc.CallOption) (*sliverpb.OpenSession, error) {
	out := new(sliverpb.OpenSession)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/OpenSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) CloseSession(ctx context.Context, in *sliverpb.CloseSession, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/CloseSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) RegisterExtension(ctx context.Context, in *sliverpb.RegisterExtensionReq, opts ...grpc.CallOption) (*sliverpb.RegisterExtension, error) {
	out := new(sliverpb.RegisterExtension)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/RegisterExtension", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) CallExtension(ctx context.Context, in *sliverpb.CallExtensionReq, opts ...grpc.CallOption) (*sliverpb.CallExtension, error) {
	out := new(sliverpb.CallExtension)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/CallExtension", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) ListExtensions(ctx context.Context, in *sliverpb.ListExtensionsReq, opts ...grpc.CallOption) (*sliverpb.ListExtensions, error) {
	out := new(sliverpb.ListExtensions)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/ListExtensions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) WGStartPortForward(ctx context.Context, in *sliverpb.WGPortForwardStartReq, opts ...grpc.CallOption) (*sliverpb.WGPortForward, error) {
	out := new(sliverpb.WGPortForward)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/WGStartPortForward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) WGStopPortForward(ctx context.Context, in *sliverpb.WGPortForwardStopReq, opts ...grpc.CallOption) (*sliverpb.WGPortForward, error) {
	out := new(sliverpb.WGPortForward)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/WGStopPortForward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) WGStartSocks(ctx context.Context, in *sliverpb.WGSocksStartReq, opts ...grpc.CallOption) (*sliverpb.WGSocks, error) {
	out := new(sliverpb.WGSocks)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/WGStartSocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) WGStopSocks(ctx context.Context, in *sliverpb.WGSocksStopReq, opts ...grpc.CallOption) (*sliverpb.WGSocks, error) {
	out := new(sliverpb.WGSocks)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/WGStopSocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) WGListForwarders(ctx context.Context, in *sliverpb.WGTCPForwardersReq, opts ...grpc.CallOption) (*sliverpb.WGTCPForwarders, error) {
	out := new(sliverpb.WGTCPForwarders)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/WGListForwarders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) WGListSocksServers(ctx context.Context, in *sliverpb.WGSocksServersReq, opts ...grpc.CallOption) (*sliverpb.WGSocksServers, error) {
	out := new(sliverpb.WGSocksServers)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/WGListSocksServers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) Shell(ctx context.Context, in *sliverpb.ShellReq, opts ...grpc.CallOption) (*sliverpb.Shell, error) {
	out := new(sliverpb.Shell)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/Shell", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) Portfwd(ctx context.Context, in *sliverpb.PortfwdReq, opts ...grpc.CallOption) (*sliverpb.Portfwd, error) {
	out := new(sliverpb.Portfwd)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/Portfwd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) CreateSocks(ctx context.Context, in *sliverpb.Socks, opts ...grpc.CallOption) (*sliverpb.Socks, error) {
	out := new(sliverpb.Socks)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/CreateSocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) CloseSocks(ctx context.Context, in *sliverpb.Socks, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/CloseSocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) SocksProxy(ctx context.Context, opts ...grpc.CallOption) (SliverRPC_SocksProxyClient, error) {
	stream, err := c.cc.NewStream(ctx, &SliverRPC_ServiceDesc.Streams[0], "/rpcpb.SliverRPC/SocksProxy", opts...)
	if err != nil {
		return nil, err
	}
	x := &sliverRPCSocksProxyClient{stream}
	return x, nil
}

type SliverRPC_SocksProxyClient interface {
	Send(*sliverpb.SocksData) error
	Recv() (*sliverpb.SocksData, error)
	grpc.ClientStream
}

type sliverRPCSocksProxyClient struct {
	grpc.ClientStream
}

func (x *sliverRPCSocksProxyClient) Send(m *sliverpb.SocksData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sliverRPCSocksProxyClient) Recv() (*sliverpb.SocksData, error) {
	m := new(sliverpb.SocksData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sliverRPCClient) CreateTunnel(ctx context.Context, in *sliverpb.Tunnel, opts ...grpc.CallOption) (*sliverpb.Tunnel, error) {
	out := new(sliverpb.Tunnel)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/CreateTunnel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) CloseTunnel(ctx context.Context, in *sliverpb.Tunnel, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, "/rpcpb.SliverRPC/CloseTunnel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) TunnelData(ctx context.Context, opts ...grpc.CallOption) (SliverRPC_TunnelDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &SliverRPC_ServiceDesc.Streams[1], "/rpcpb.SliverRPC/TunnelData", opts...)
	if err != nil {
		return nil, err
	}
	x := &sliverRPCTunnelDataClient{stream}
	return x, nil
}

type SliverRPC_TunnelDataClient interface {
	Send(*sliverpb.TunnelData) error
	Recv() (*sliverpb.TunnelData, error)
	grpc.ClientStream
}

type sliverRPCTunnelDataClient struct {
	grpc.ClientStream
}

func (x *sliverRPCTunnelDataClient) Send(m *sliverpb.TunnelData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sliverRPCTunnelDataClient) Recv() (*sliverpb.TunnelData, error) {
	m := new(sliverpb.TunnelData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sliverRPCClient) Events(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (SliverRPC_EventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &SliverRPC_ServiceDesc.Streams[2], "/rpcpb.SliverRPC/Events", opts...)
	if err != nil {
		return nil, err
	}
	x := &sliverRPCEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SliverRPC_EventsClient interface {
	Recv() (*clientpb.Event, error)
	grpc.ClientStream
}

type sliverRPCEventsClient struct {
	grpc.ClientStream
}

func (x *sliverRPCEventsClient) Recv() (*clientpb.Event, error) {
	m := new(clientpb.Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SliverRPCServer is the server API for SliverRPC service.
// All implementations must embed UnimplementedSliverRPCServer
// for forward compatibility
type SliverRPCServer interface {
	// *** Version ***
	GetVersion(context.Context, *commonpb.Empty) (*clientpb.Version, error)
	// *** Operator Commands ***
	GetOperators(context.Context, *commonpb.Empty) (*clientpb.Operators, error)
	// *** Generic ***
	Kill(context.Context, *sliverpb.KillReq) (*commonpb.Empty, error)
	// *** Sessions ***
	GetSessions(context.Context, *commonpb.Empty) (*clientpb.Sessions, error)
	UpdateSession(context.Context, *clientpb.UpdateSession) (*clientpb.Session, error)
	// *** Beacons ***
	GetBeacons(context.Context, *commonpb.Empty) (*clientpb.Beacons, error)
	GetBeacon(context.Context, *clientpb.Beacon) (*clientpb.Beacon, error)
	RmBeacon(context.Context, *clientpb.Beacon) (*commonpb.Empty, error)
	GetBeaconTasks(context.Context, *clientpb.Beacon) (*clientpb.BeaconTasks, error)
	GetBeaconTaskContent(context.Context, *clientpb.BeaconTask) (*clientpb.BeaconTask, error)
	// ***Threat monitoring ***
	MonitorStart(context.Context, *commonpb.Empty) (*commonpb.Response, error)
	MonitorStop(context.Context, *commonpb.Empty) (*commonpb.Empty, error)
	// *** Jobs ***
	GetJobs(context.Context, *commonpb.Empty) (*clientpb.Jobs, error)
	KillJob(context.Context, *clientpb.KillJobReq) (*clientpb.KillJob, error)
	// *** Listeners ***
	StartMTLSListener(context.Context, *clientpb.MTLSListenerReq) (*clientpb.MTLSListener, error)
	StartWGListener(context.Context, *clientpb.WGListenerReq) (*clientpb.WGListener, error)
	StartDNSListener(context.Context, *clientpb.DNSListenerReq) (*clientpb.DNSListener, error)
	StartHTTPSListener(context.Context, *clientpb.HTTPListenerReq) (*clientpb.HTTPListener, error)
	StartHTTPListener(context.Context, *clientpb.HTTPListenerReq) (*clientpb.HTTPListener, error)
	// *** Stager Listener ***
	StartTCPStagerListener(context.Context, *clientpb.StagerListenerReq) (*clientpb.StagerListener, error)
	StartHTTPStagerListener(context.Context, *clientpb.StagerListenerReq) (*clientpb.StagerListener, error)
	// *** Loot ***
	LootAdd(context.Context, *clientpb.Loot) (*clientpb.Loot, error)
	LootRm(context.Context, *clientpb.Loot) (*commonpb.Empty, error)
	LootUpdate(context.Context, *clientpb.Loot) (*clientpb.Loot, error)
	LootContent(context.Context, *clientpb.Loot) (*clientpb.Loot, error)
	LootAll(context.Context, *commonpb.Empty) (*clientpb.AllLoot, error)
	LootAllOf(context.Context, *clientpb.Loot) (*clientpb.AllLoot, error)
	// *** Hosts ***
	Hosts(context.Context, *commonpb.Empty) (*clientpb.AllHosts, error)
	Host(context.Context, *clientpb.Host) (*clientpb.Host, error)
	HostRm(context.Context, *clientpb.Host) (*commonpb.Empty, error)
	HostIOCRm(context.Context, *clientpb.IOC) (*commonpb.Empty, error)
	// *** Implants ***
	Generate(context.Context, *clientpb.GenerateReq) (*clientpb.Generate, error)
	Regenerate(context.Context, *clientpb.RegenerateReq) (*clientpb.Generate, error)
	ImplantBuilds(context.Context, *commonpb.Empty) (*clientpb.ImplantBuilds, error)
	DeleteImplantBuild(context.Context, *clientpb.DeleteReq) (*commonpb.Empty, error)
	Canaries(context.Context, *commonpb.Empty) (*clientpb.Canaries, error)
	GenerateWGClientConfig(context.Context, *commonpb.Empty) (*clientpb.WGClientConfig, error)
	GenerateUniqueIP(context.Context, *commonpb.Empty) (*clientpb.UniqueWGIP, error)
	ImplantProfiles(context.Context, *commonpb.Empty) (*clientpb.ImplantProfiles, error)
	DeleteImplantProfile(context.Context, *clientpb.DeleteReq) (*commonpb.Empty, error)
	SaveImplantProfile(context.Context, *clientpb.ImplantProfile) (*clientpb.ImplantProfile, error)
	MsfStage(context.Context, *clientpb.MsfStagerReq) (*clientpb.MsfStager, error)
	ShellcodeRDI(context.Context, *clientpb.ShellcodeRDIReq) (*clientpb.ShellcodeRDI, error)
	GetCompiler(context.Context, *commonpb.Empty) (*clientpb.Compiler, error)
	// *** Websites ***
	Websites(context.Context, *commonpb.Empty) (*clientpb.Websites, error)
	Website(context.Context, *clientpb.Website) (*clientpb.Website, error)
	WebsiteRemove(context.Context, *clientpb.Website) (*commonpb.Empty, error)
	WebsiteAddContent(context.Context, *clientpb.WebsiteAddContent) (*clientpb.Website, error)
	WebsiteUpdateContent(context.Context, *clientpb.WebsiteAddContent) (*clientpb.Website, error)
	WebsiteRemoveContent(context.Context, *clientpb.WebsiteRemoveContent) (*clientpb.Website, error)
	// *** Session Interactions ***
	Ping(context.Context, *sliverpb.Ping) (*sliverpb.Ping, error)
	Ps(context.Context, *sliverpb.PsReq) (*sliverpb.Ps, error)
	Terminate(context.Context, *sliverpb.TerminateReq) (*sliverpb.Terminate, error)
	Ifconfig(context.Context, *sliverpb.IfconfigReq) (*sliverpb.Ifconfig, error)
	Netstat(context.Context, *sliverpb.NetstatReq) (*sliverpb.Netstat, error)
	Ls(context.Context, *sliverpb.LsReq) (*sliverpb.Ls, error)
	Cd(context.Context, *sliverpb.CdReq) (*sliverpb.Pwd, error)
	Pwd(context.Context, *sliverpb.PwdReq) (*sliverpb.Pwd, error)
	Rm(context.Context, *sliverpb.RmReq) (*sliverpb.Rm, error)
	Mkdir(context.Context, *sliverpb.MkdirReq) (*sliverpb.Mkdir, error)
	Download(context.Context, *sliverpb.DownloadReq) (*sliverpb.Download, error)
	Upload(context.Context, *sliverpb.UploadReq) (*sliverpb.Upload, error)
	ProcessDump(context.Context, *sliverpb.ProcessDumpReq) (*sliverpb.ProcessDump, error)
	RunAs(context.Context, *sliverpb.RunAsReq) (*sliverpb.RunAs, error)
	Impersonate(context.Context, *sliverpb.ImpersonateReq) (*sliverpb.Impersonate, error)
	RevToSelf(context.Context, *sliverpb.RevToSelfReq) (*sliverpb.RevToSelf, error)
	GetSystem(context.Context, *clientpb.GetSystemReq) (*sliverpb.GetSystem, error)
	Task(context.Context, *sliverpb.TaskReq) (*sliverpb.Task, error)
	Msf(context.Context, *clientpb.MSFReq) (*sliverpb.Task, error)
	MsfRemote(context.Context, *clientpb.MSFRemoteReq) (*sliverpb.Task, error)
	ExecuteAssembly(context.Context, *sliverpb.ExecuteAssemblyReq) (*sliverpb.ExecuteAssembly, error)
	Migrate(context.Context, *clientpb.MigrateReq) (*sliverpb.Migrate, error)
	Execute(context.Context, *sliverpb.ExecuteReq) (*sliverpb.Execute, error)
	ExecuteToken(context.Context, *sliverpb.ExecuteTokenReq) (*sliverpb.Execute, error)
	Sideload(context.Context, *sliverpb.SideloadReq) (*sliverpb.Sideload, error)
	SpawnDll(context.Context, *sliverpb.InvokeSpawnDllReq) (*sliverpb.SpawnDll, error)
	Screenshot(context.Context, *sliverpb.ScreenshotReq) (*sliverpb.Screenshot, error)
	// *** Pivots ***
	PivotStartListener(context.Context, *sliverpb.PivotStartListenerReq) (*sliverpb.PivotListener, error)
	PivotStopListener(context.Context, *sliverpb.PivotStopListenerReq) (*commonpb.Empty, error)
	PivotSessionListeners(context.Context, *sliverpb.PivotListenersReq) (*sliverpb.PivotListeners, error)
	PivotGraph(context.Context, *commonpb.Empty) (*clientpb.PivotGraph, error)
	StartService(context.Context, *sliverpb.StartServiceReq) (*sliverpb.ServiceInfo, error)
	StopService(context.Context, *sliverpb.StopServiceReq) (*sliverpb.ServiceInfo, error)
	RemoveService(context.Context, *sliverpb.RemoveServiceReq) (*sliverpb.ServiceInfo, error)
	MakeToken(context.Context, *sliverpb.MakeTokenReq) (*sliverpb.MakeToken, error)
	GetEnv(context.Context, *sliverpb.EnvReq) (*sliverpb.EnvInfo, error)
	SetEnv(context.Context, *sliverpb.SetEnvReq) (*sliverpb.SetEnv, error)
	UnsetEnv(context.Context, *sliverpb.UnsetEnvReq) (*sliverpb.UnsetEnv, error)
	Backdoor(context.Context, *sliverpb.BackdoorReq) (*sliverpb.Backdoor, error)
	RegistryRead(context.Context, *sliverpb.RegistryReadReq) (*sliverpb.RegistryRead, error)
	RegistryWrite(context.Context, *sliverpb.RegistryWriteReq) (*sliverpb.RegistryWrite, error)
	RegistryCreateKey(context.Context, *sliverpb.RegistryCreateKeyReq) (*sliverpb.RegistryCreateKey, error)
	RegistryDeleteKey(context.Context, *sliverpb.RegistryDeleteKeyReq) (*sliverpb.RegistryDeleteKey, error)
	RegistryListSubKeys(context.Context, *sliverpb.RegistrySubKeyListReq) (*sliverpb.RegistrySubKeyList, error)
	RegistryListValues(context.Context, *sliverpb.RegistryListValuesReq) (*sliverpb.RegistryValuesList, error)
	RunSSHCommand(context.Context, *sliverpb.SSHCommandReq) (*sliverpb.SSHCommand, error)
	HijackDLL(context.Context, *clientpb.DllHijackReq) (*clientpb.DllHijack, error)
	GetPrivs(context.Context, *sliverpb.GetPrivsReq) (*sliverpb.GetPrivs, error)
	// Beacon only commands
	OpenSession(context.Context, *sliverpb.OpenSession) (*sliverpb.OpenSession, error)
	CloseSession(context.Context, *sliverpb.CloseSession) (*commonpb.Empty, error)
	// Extensions
	RegisterExtension(context.Context, *sliverpb.RegisterExtensionReq) (*sliverpb.RegisterExtension, error)
	CallExtension(context.Context, *sliverpb.CallExtensionReq) (*sliverpb.CallExtension, error)
	ListExtensions(context.Context, *sliverpb.ListExtensionsReq) (*sliverpb.ListExtensions, error)
	// *** Wireguard Specific ***
	WGStartPortForward(context.Context, *sliverpb.WGPortForwardStartReq) (*sliverpb.WGPortForward, error)
	WGStopPortForward(context.Context, *sliverpb.WGPortForwardStopReq) (*sliverpb.WGPortForward, error)
	WGStartSocks(context.Context, *sliverpb.WGSocksStartReq) (*sliverpb.WGSocks, error)
	WGStopSocks(context.Context, *sliverpb.WGSocksStopReq) (*sliverpb.WGSocks, error)
	WGListForwarders(context.Context, *sliverpb.WGTCPForwardersReq) (*sliverpb.WGTCPForwarders, error)
	WGListSocksServers(context.Context, *sliverpb.WGSocksServersReq) (*sliverpb.WGSocksServers, error)
	// *** Realtime Commands ***
	Shell(context.Context, *sliverpb.ShellReq) (*sliverpb.Shell, error)
	Portfwd(context.Context, *sliverpb.PortfwdReq) (*sliverpb.Portfwd, error)
	// *** Socks5 ***
	CreateSocks(context.Context, *sliverpb.Socks) (*sliverpb.Socks, error)
	CloseSocks(context.Context, *sliverpb.Socks) (*commonpb.Empty, error)
	SocksProxy(SliverRPC_SocksProxyServer) error
	// *** Tunnels ***
	CreateTunnel(context.Context, *sliverpb.Tunnel) (*sliverpb.Tunnel, error)
	CloseTunnel(context.Context, *sliverpb.Tunnel) (*commonpb.Empty, error)
	TunnelData(SliverRPC_TunnelDataServer) error
	// *** Events ***
	Events(*commonpb.Empty, SliverRPC_EventsServer) error
	mustEmbedUnimplementedSliverRPCServer()
}

// UnimplementedSliverRPCServer must be embedded to have forward compatible implementations.
type UnimplementedSliverRPCServer struct {
}

func (UnimplementedSliverRPCServer) GetVersion(context.Context, *commonpb.Empty) (*clientpb.Version, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedSliverRPCServer) GetOperators(context.Context, *commonpb.Empty) (*clientpb.Operators, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperators not implemented")
}
func (UnimplementedSliverRPCServer) Kill(context.Context, *sliverpb.KillReq) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Kill not implemented")
}
func (UnimplementedSliverRPCServer) GetSessions(context.Context, *commonpb.Empty) (*clientpb.Sessions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessions not implemented")
}
func (UnimplementedSliverRPCServer) UpdateSession(context.Context, *clientpb.UpdateSession) (*clientpb.Session, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSession not implemented")
}
func (UnimplementedSliverRPCServer) GetBeacons(context.Context, *commonpb.Empty) (*clientpb.Beacons, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBeacons not implemented")
}
func (UnimplementedSliverRPCServer) GetBeacon(context.Context, *clientpb.Beacon) (*clientpb.Beacon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBeacon not implemented")
}
func (UnimplementedSliverRPCServer) RmBeacon(context.Context, *clientpb.Beacon) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RmBeacon not implemented")
}
func (UnimplementedSliverRPCServer) GetBeaconTasks(context.Context, *clientpb.Beacon) (*clientpb.BeaconTasks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBeaconTasks not implemented")
}
func (UnimplementedSliverRPCServer) GetBeaconTaskContent(context.Context, *clientpb.BeaconTask) (*clientpb.BeaconTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBeaconTaskContent not implemented")
}
func (UnimplementedSliverRPCServer) MonitorStart(context.Context, *commonpb.Empty) (*commonpb.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MonitorStart not implemented")
}
func (UnimplementedSliverRPCServer) MonitorStop(context.Context, *commonpb.Empty) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MonitorStop not implemented")
}
func (UnimplementedSliverRPCServer) GetJobs(context.Context, *commonpb.Empty) (*clientpb.Jobs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobs not implemented")
}
func (UnimplementedSliverRPCServer) KillJob(context.Context, *clientpb.KillJobReq) (*clientpb.KillJob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillJob not implemented")
}
func (UnimplementedSliverRPCServer) StartMTLSListener(context.Context, *clientpb.MTLSListenerReq) (*clientpb.MTLSListener, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartMTLSListener not implemented")
}
func (UnimplementedSliverRPCServer) StartWGListener(context.Context, *clientpb.WGListenerReq) (*clientpb.WGListener, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartWGListener not implemented")
}
func (UnimplementedSliverRPCServer) StartDNSListener(context.Context, *clientpb.DNSListenerReq) (*clientpb.DNSListener, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartDNSListener not implemented")
}
func (UnimplementedSliverRPCServer) StartHTTPSListener(context.Context, *clientpb.HTTPListenerReq) (*clientpb.HTTPListener, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartHTTPSListener not implemented")
}
func (UnimplementedSliverRPCServer) StartHTTPListener(context.Context, *clientpb.HTTPListenerReq) (*clientpb.HTTPListener, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartHTTPListener not implemented")
}
func (UnimplementedSliverRPCServer) StartTCPStagerListener(context.Context, *clientpb.StagerListenerReq) (*clientpb.StagerListener, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartTCPStagerListener not implemented")
}
func (UnimplementedSliverRPCServer) StartHTTPStagerListener(context.Context, *clientpb.StagerListenerReq) (*clientpb.StagerListener, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartHTTPStagerListener not implemented")
}
func (UnimplementedSliverRPCServer) LootAdd(context.Context, *clientpb.Loot) (*clientpb.Loot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LootAdd not implemented")
}
func (UnimplementedSliverRPCServer) LootRm(context.Context, *clientpb.Loot) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LootRm not implemented")
}
func (UnimplementedSliverRPCServer) LootUpdate(context.Context, *clientpb.Loot) (*clientpb.Loot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LootUpdate not implemented")
}
func (UnimplementedSliverRPCServer) LootContent(context.Context, *clientpb.Loot) (*clientpb.Loot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LootContent not implemented")
}
func (UnimplementedSliverRPCServer) LootAll(context.Context, *commonpb.Empty) (*clientpb.AllLoot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LootAll not implemented")
}
func (UnimplementedSliverRPCServer) LootAllOf(context.Context, *clientpb.Loot) (*clientpb.AllLoot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LootAllOf not implemented")
}
func (UnimplementedSliverRPCServer) Hosts(context.Context, *commonpb.Empty) (*clientpb.AllHosts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hosts not implemented")
}
func (UnimplementedSliverRPCServer) Host(context.Context, *clientpb.Host) (*clientpb.Host, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Host not implemented")
}
func (UnimplementedSliverRPCServer) HostRm(context.Context, *clientpb.Host) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HostRm not implemented")
}
func (UnimplementedSliverRPCServer) HostIOCRm(context.Context, *clientpb.IOC) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HostIOCRm not implemented")
}
func (UnimplementedSliverRPCServer) Generate(context.Context, *clientpb.GenerateReq) (*clientpb.Generate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Generate not implemented")
}
func (UnimplementedSliverRPCServer) Regenerate(context.Context, *clientpb.RegenerateReq) (*clientpb.Generate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Regenerate not implemented")
}
func (UnimplementedSliverRPCServer) ImplantBuilds(context.Context, *commonpb.Empty) (*clientpb.ImplantBuilds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImplantBuilds not implemented")
}
func (UnimplementedSliverRPCServer) DeleteImplantBuild(context.Context, *clientpb.DeleteReq) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteImplantBuild not implemented")
}
func (UnimplementedSliverRPCServer) Canaries(context.Context, *commonpb.Empty) (*clientpb.Canaries, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Canaries not implemented")
}
func (UnimplementedSliverRPCServer) GenerateWGClientConfig(context.Context, *commonpb.Empty) (*clientpb.WGClientConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateWGClientConfig not implemented")
}
func (UnimplementedSliverRPCServer) GenerateUniqueIP(context.Context, *commonpb.Empty) (*clientpb.UniqueWGIP, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateUniqueIP not implemented")
}
func (UnimplementedSliverRPCServer) ImplantProfiles(context.Context, *commonpb.Empty) (*clientpb.ImplantProfiles, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImplantProfiles not implemented")
}
func (UnimplementedSliverRPCServer) DeleteImplantProfile(context.Context, *clientpb.DeleteReq) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteImplantProfile not implemented")
}
func (UnimplementedSliverRPCServer) SaveImplantProfile(context.Context, *clientpb.ImplantProfile) (*clientpb.ImplantProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveImplantProfile not implemented")
}
func (UnimplementedSliverRPCServer) MsfStage(context.Context, *clientpb.MsfStagerReq) (*clientpb.MsfStager, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MsfStage not implemented")
}
func (UnimplementedSliverRPCServer) ShellcodeRDI(context.Context, *clientpb.ShellcodeRDIReq) (*clientpb.ShellcodeRDI, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShellcodeRDI not implemented")
}
func (UnimplementedSliverRPCServer) GetCompiler(context.Context, *commonpb.Empty) (*clientpb.Compiler, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompiler not implemented")
}
func (UnimplementedSliverRPCServer) Websites(context.Context, *commonpb.Empty) (*clientpb.Websites, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Websites not implemented")
}
func (UnimplementedSliverRPCServer) Website(context.Context, *clientpb.Website) (*clientpb.Website, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Website not implemented")
}
func (UnimplementedSliverRPCServer) WebsiteRemove(context.Context, *clientpb.Website) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebsiteRemove not implemented")
}
func (UnimplementedSliverRPCServer) WebsiteAddContent(context.Context, *clientpb.WebsiteAddContent) (*clientpb.Website, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebsiteAddContent not implemented")
}
func (UnimplementedSliverRPCServer) WebsiteUpdateContent(context.Context, *clientpb.WebsiteAddContent) (*clientpb.Website, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebsiteUpdateContent not implemented")
}
func (UnimplementedSliverRPCServer) WebsiteRemoveContent(context.Context, *clientpb.WebsiteRemoveContent) (*clientpb.Website, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebsiteRemoveContent not implemented")
}
func (UnimplementedSliverRPCServer) Ping(context.Context, *sliverpb.Ping) (*sliverpb.Ping, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedSliverRPCServer) Ps(context.Context, *sliverpb.PsReq) (*sliverpb.Ps, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ps not implemented")
}
func (UnimplementedSliverRPCServer) Terminate(context.Context, *sliverpb.TerminateReq) (*sliverpb.Terminate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Terminate not implemented")
}
func (UnimplementedSliverRPCServer) Ifconfig(context.Context, *sliverpb.IfconfigReq) (*sliverpb.Ifconfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ifconfig not implemented")
}
func (UnimplementedSliverRPCServer) Netstat(context.Context, *sliverpb.NetstatReq) (*sliverpb.Netstat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Netstat not implemented")
}
func (UnimplementedSliverRPCServer) Ls(context.Context, *sliverpb.LsReq) (*sliverpb.Ls, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ls not implemented")
}
func (UnimplementedSliverRPCServer) Cd(context.Context, *sliverpb.CdReq) (*sliverpb.Pwd, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cd not implemented")
}
func (UnimplementedSliverRPCServer) Pwd(context.Context, *sliverpb.PwdReq) (*sliverpb.Pwd, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pwd not implemented")
}
func (UnimplementedSliverRPCServer) Rm(context.Context, *sliverpb.RmReq) (*sliverpb.Rm, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rm not implemented")
}
func (UnimplementedSliverRPCServer) Mkdir(context.Context, *sliverpb.MkdirReq) (*sliverpb.Mkdir, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mkdir not implemented")
}
func (UnimplementedSliverRPCServer) Download(context.Context, *sliverpb.DownloadReq) (*sliverpb.Download, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedSliverRPCServer) Upload(context.Context, *sliverpb.UploadReq) (*sliverpb.Upload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedSliverRPCServer) ProcessDump(context.Context, *sliverpb.ProcessDumpReq) (*sliverpb.ProcessDump, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessDump not implemented")
}
func (UnimplementedSliverRPCServer) RunAs(context.Context, *sliverpb.RunAsReq) (*sliverpb.RunAs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunAs not implemented")
}
func (UnimplementedSliverRPCServer) Impersonate(context.Context, *sliverpb.ImpersonateReq) (*sliverpb.Impersonate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Impersonate not implemented")
}
func (UnimplementedSliverRPCServer) RevToSelf(context.Context, *sliverpb.RevToSelfReq) (*sliverpb.RevToSelf, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevToSelf not implemented")
}
func (UnimplementedSliverRPCServer) GetSystem(context.Context, *clientpb.GetSystemReq) (*sliverpb.GetSystem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystem not implemented")
}
func (UnimplementedSliverRPCServer) Task(context.Context, *sliverpb.TaskReq) (*sliverpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Task not implemented")
}
func (UnimplementedSliverRPCServer) Msf(context.Context, *clientpb.MSFReq) (*sliverpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Msf not implemented")
}
func (UnimplementedSliverRPCServer) MsfRemote(context.Context, *clientpb.MSFRemoteReq) (*sliverpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MsfRemote not implemented")
}
func (UnimplementedSliverRPCServer) ExecuteAssembly(context.Context, *sliverpb.ExecuteAssemblyReq) (*sliverpb.ExecuteAssembly, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteAssembly not implemented")
}
func (UnimplementedSliverRPCServer) Migrate(context.Context, *clientpb.MigrateReq) (*sliverpb.Migrate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Migrate not implemented")
}
func (UnimplementedSliverRPCServer) Execute(context.Context, *sliverpb.ExecuteReq) (*sliverpb.Execute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedSliverRPCServer) ExecuteToken(context.Context, *sliverpb.ExecuteTokenReq) (*sliverpb.Execute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteToken not implemented")
}
func (UnimplementedSliverRPCServer) Sideload(context.Context, *sliverpb.SideloadReq) (*sliverpb.Sideload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sideload not implemented")
}
func (UnimplementedSliverRPCServer) SpawnDll(context.Context, *sliverpb.InvokeSpawnDllReq) (*sliverpb.SpawnDll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpawnDll not implemented")
}
func (UnimplementedSliverRPCServer) Screenshot(context.Context, *sliverpb.ScreenshotReq) (*sliverpb.Screenshot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Screenshot not implemented")
}
func (UnimplementedSliverRPCServer) PivotStartListener(context.Context, *sliverpb.PivotStartListenerReq) (*sliverpb.PivotListener, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PivotStartListener not implemented")
}
func (UnimplementedSliverRPCServer) PivotStopListener(context.Context, *sliverpb.PivotStopListenerReq) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PivotStopListener not implemented")
}
func (UnimplementedSliverRPCServer) PivotSessionListeners(context.Context, *sliverpb.PivotListenersReq) (*sliverpb.PivotListeners, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PivotSessionListeners not implemented")
}
func (UnimplementedSliverRPCServer) PivotGraph(context.Context, *commonpb.Empty) (*clientpb.PivotGraph, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PivotGraph not implemented")
}
func (UnimplementedSliverRPCServer) StartService(context.Context, *sliverpb.StartServiceReq) (*sliverpb.ServiceInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartService not implemented")
}
func (UnimplementedSliverRPCServer) StopService(context.Context, *sliverpb.StopServiceReq) (*sliverpb.ServiceInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopService not implemented")
}
func (UnimplementedSliverRPCServer) RemoveService(context.Context, *sliverpb.RemoveServiceReq) (*sliverpb.ServiceInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveService not implemented")
}
func (UnimplementedSliverRPCServer) MakeToken(context.Context, *sliverpb.MakeTokenReq) (*sliverpb.MakeToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeToken not implemented")
}
func (UnimplementedSliverRPCServer) GetEnv(context.Context, *sliverpb.EnvReq) (*sliverpb.EnvInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnv not implemented")
}
func (UnimplementedSliverRPCServer) SetEnv(context.Context, *sliverpb.SetEnvReq) (*sliverpb.SetEnv, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEnv not implemented")
}
func (UnimplementedSliverRPCServer) UnsetEnv(context.Context, *sliverpb.UnsetEnvReq) (*sliverpb.UnsetEnv, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsetEnv not implemented")
}
func (UnimplementedSliverRPCServer) Backdoor(context.Context, *sliverpb.BackdoorReq) (*sliverpb.Backdoor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Backdoor not implemented")
}
func (UnimplementedSliverRPCServer) RegistryRead(context.Context, *sliverpb.RegistryReadReq) (*sliverpb.RegistryRead, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistryRead not implemented")
}
func (UnimplementedSliverRPCServer) RegistryWrite(context.Context, *sliverpb.RegistryWriteReq) (*sliverpb.RegistryWrite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistryWrite not implemented")
}
func (UnimplementedSliverRPCServer) RegistryCreateKey(context.Context, *sliverpb.RegistryCreateKeyReq) (*sliverpb.RegistryCreateKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistryCreateKey not implemented")
}
func (UnimplementedSliverRPCServer) RegistryDeleteKey(context.Context, *sliverpb.RegistryDeleteKeyReq) (*sliverpb.RegistryDeleteKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistryDeleteKey not implemented")
}
func (UnimplementedSliverRPCServer) RegistryListSubKeys(context.Context, *sliverpb.RegistrySubKeyListReq) (*sliverpb.RegistrySubKeyList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistryListSubKeys not implemented")
}
func (UnimplementedSliverRPCServer) RegistryListValues(context.Context, *sliverpb.RegistryListValuesReq) (*sliverpb.RegistryValuesList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistryListValues not implemented")
}
func (UnimplementedSliverRPCServer) RunSSHCommand(context.Context, *sliverpb.SSHCommandReq) (*sliverpb.SSHCommand, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunSSHCommand not implemented")
}
func (UnimplementedSliverRPCServer) HijackDLL(context.Context, *clientpb.DllHijackReq) (*clientpb.DllHijack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HijackDLL not implemented")
}
func (UnimplementedSliverRPCServer) GetPrivs(context.Context, *sliverpb.GetPrivsReq) (*sliverpb.GetPrivs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrivs not implemented")
}
func (UnimplementedSliverRPCServer) OpenSession(context.Context, *sliverpb.OpenSession) (*sliverpb.OpenSession, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenSession not implemented")
}
func (UnimplementedSliverRPCServer) CloseSession(context.Context, *sliverpb.CloseSession) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseSession not implemented")
}
func (UnimplementedSliverRPCServer) RegisterExtension(context.Context, *sliverpb.RegisterExtensionReq) (*sliverpb.RegisterExtension, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterExtension not implemented")
}
func (UnimplementedSliverRPCServer) CallExtension(context.Context, *sliverpb.CallExtensionReq) (*sliverpb.CallExtension, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallExtension not implemented")
}
func (UnimplementedSliverRPCServer) ListExtensions(context.Context, *sliverpb.ListExtensionsReq) (*sliverpb.ListExtensions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExtensions not implemented")
}
func (UnimplementedSliverRPCServer) WGStartPortForward(context.Context, *sliverpb.WGPortForwardStartReq) (*sliverpb.WGPortForward, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WGStartPortForward not implemented")
}
func (UnimplementedSliverRPCServer) WGStopPortForward(context.Context, *sliverpb.WGPortForwardStopReq) (*sliverpb.WGPortForward, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WGStopPortForward not implemented")
}
func (UnimplementedSliverRPCServer) WGStartSocks(context.Context, *sliverpb.WGSocksStartReq) (*sliverpb.WGSocks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WGStartSocks not implemented")
}
func (UnimplementedSliverRPCServer) WGStopSocks(context.Context, *sliverpb.WGSocksStopReq) (*sliverpb.WGSocks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WGStopSocks not implemented")
}
func (UnimplementedSliverRPCServer) WGListForwarders(context.Context, *sliverpb.WGTCPForwardersReq) (*sliverpb.WGTCPForwarders, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WGListForwarders not implemented")
}
func (UnimplementedSliverRPCServer) WGListSocksServers(context.Context, *sliverpb.WGSocksServersReq) (*sliverpb.WGSocksServers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WGListSocksServers not implemented")
}
func (UnimplementedSliverRPCServer) Shell(context.Context, *sliverpb.ShellReq) (*sliverpb.Shell, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shell not implemented")
}
func (UnimplementedSliverRPCServer) Portfwd(context.Context, *sliverpb.PortfwdReq) (*sliverpb.Portfwd, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Portfwd not implemented")
}
func (UnimplementedSliverRPCServer) CreateSocks(context.Context, *sliverpb.Socks) (*sliverpb.Socks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSocks not implemented")
}
func (UnimplementedSliverRPCServer) CloseSocks(context.Context, *sliverpb.Socks) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseSocks not implemented")
}
func (UnimplementedSliverRPCServer) SocksProxy(SliverRPC_SocksProxyServer) error {
	return status.Errorf(codes.Unimplemented, "method SocksProxy not implemented")
}
func (UnimplementedSliverRPCServer) CreateTunnel(context.Context, *sliverpb.Tunnel) (*sliverpb.Tunnel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTunnel not implemented")
}
func (UnimplementedSliverRPCServer) CloseTunnel(context.Context, *sliverpb.Tunnel) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseTunnel not implemented")
}
func (UnimplementedSliverRPCServer) TunnelData(SliverRPC_TunnelDataServer) error {
	return status.Errorf(codes.Unimplemented, "method TunnelData not implemented")
}
func (UnimplementedSliverRPCServer) Events(*commonpb.Empty, SliverRPC_EventsServer) error {
	return status.Errorf(codes.Unimplemented, "method Events not implemented")
}
func (UnimplementedSliverRPCServer) mustEmbedUnimplementedSliverRPCServer() {}

// UnsafeSliverRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SliverRPCServer will
// result in compilation errors.
type UnsafeSliverRPCServer interface {
	mustEmbedUnimplementedSliverRPCServer()
}

func RegisterSliverRPCServer(s grpc.ServiceRegistrar, srv SliverRPCServer) {
	s.RegisterService(&SliverRPC_ServiceDesc, srv)
}

func _SliverRPC_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).GetVersion(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_GetOperators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).GetOperators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/GetOperators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).GetOperators(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_Kill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sliverpb.KillReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).Kill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/Kill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).Kill(ctx, req.(*sliverpb.KillReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_GetSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).GetSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/GetSessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).GetSessions(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_UpdateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.UpdateSession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).UpdateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/UpdateSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).UpdateSession(ctx, req.(*clientpb.UpdateSession))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_GetBeacons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).GetBeacons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/GetBeacons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).GetBeacons(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_GetBeacon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Beacon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).GetBeacon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/GetBeacon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).GetBeacon(ctx, req.(*clientpb.Beacon))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_RmBeacon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Beacon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).RmBeacon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/RmBeacon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).RmBeacon(ctx, req.(*clientpb.Beacon))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_GetBeaconTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Beacon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).GetBeaconTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/GetBeaconTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).GetBeaconTasks(ctx, req.(*clientpb.Beacon))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_GetBeaconTaskContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.BeaconTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).GetBeaconTaskContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/GetBeaconTaskContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).GetBeaconTaskContent(ctx, req.(*clientpb.BeaconTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_MonitorStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).MonitorStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/MonitorStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).MonitorStart(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_MonitorStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).MonitorStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/MonitorStop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).MonitorStop(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_GetJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).GetJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/GetJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).GetJobs(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_KillJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.KillJobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).KillJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/KillJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).KillJob(ctx, req.(*clientpb.KillJobReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_StartMTLSListener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.MTLSListenerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).StartMTLSListener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/StartMTLSListener",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).StartMTLSListener(ctx, req.(*clientpb.MTLSListenerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_StartWGListener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.WGListenerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).StartWGListener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/StartWGListener",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).StartWGListener(ctx, req.(*clientpb.WGListenerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_StartDNSListener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.DNSListenerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).StartDNSListener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/StartDNSListener",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).StartDNSListener(ctx, req.(*clientpb.DNSListenerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_StartHTTPSListener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.HTTPListenerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).StartHTTPSListener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/StartHTTPSListener",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).StartHTTPSListener(ctx, req.(*clientpb.HTTPListenerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_StartHTTPListener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.HTTPListenerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).StartHTTPListener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/StartHTTPListener",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).StartHTTPListener(ctx, req.(*clientpb.HTTPListenerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_StartTCPStagerListener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.StagerListenerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).StartTCPStagerListener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/StartTCPStagerListener",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).StartTCPStagerListener(ctx, req.(*clientpb.StagerListenerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_StartHTTPStagerListener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.StagerListenerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).StartHTTPStagerListener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/StartHTTPStagerListener",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).StartHTTPStagerListener(ctx, req.(*clientpb.StagerListenerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_LootAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Loot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).LootAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/LootAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).LootAdd(ctx, req.(*clientpb.Loot))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_LootRm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Loot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).LootRm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/LootRm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).LootRm(ctx, req.(*clientpb.Loot))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_LootUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Loot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).LootUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/LootUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).LootUpdate(ctx, req.(*clientpb.Loot))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_LootContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Loot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).LootContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/LootContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).LootContent(ctx, req.(*clientpb.Loot))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_LootAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).LootAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/LootAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).LootAll(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_LootAllOf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Loot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).LootAllOf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/LootAllOf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).LootAllOf(ctx, req.(*clientpb.Loot))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_Hosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).Hosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/Hosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).Hosts(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_Host_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Host)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).Host(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/Host",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).Host(ctx, req.(*clientpb.Host))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_HostRm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Host)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).HostRm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/HostRm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).HostRm(ctx, req.(*clientpb.Host))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_HostIOCRm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.IOC)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).HostIOCRm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/HostIOCRm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).HostIOCRm(ctx, req.(*clientpb.IOC))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_Generate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.GenerateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).Generate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/Generate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).Generate(ctx, req.(*clientpb.GenerateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_Regenerate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.RegenerateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).Regenerate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/Regenerate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).Regenerate(ctx, req.(*clientpb.RegenerateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_ImplantBuilds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).ImplantBuilds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/ImplantBuilds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).ImplantBuilds(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_DeleteImplantBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).DeleteImplantBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/DeleteImplantBuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).DeleteImplantBuild(ctx, req.(*clientpb.DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_Canaries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).Canaries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/Canaries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).Canaries(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_GenerateWGClientConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).GenerateWGClientConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/GenerateWGClientConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).GenerateWGClientConfig(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_GenerateUniqueIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).GenerateUniqueIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/GenerateUniqueIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).GenerateUniqueIP(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_ImplantProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).ImplantProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/ImplantProfiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).ImplantProfiles(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_DeleteImplantProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).DeleteImplantProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/DeleteImplantProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).DeleteImplantProfile(ctx, req.(*clientpb.DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_SaveImplantProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.ImplantProfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).SaveImplantProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/SaveImplantProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).SaveImplantProfile(ctx, req.(*clientpb.ImplantProfile))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_MsfStage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.MsfStagerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).MsfStage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/MsfStage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).MsfStage(ctx, req.(*clientpb.MsfStagerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_ShellcodeRDI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.ShellcodeRDIReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).ShellcodeRDI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/ShellcodeRDI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).ShellcodeRDI(ctx, req.(*clientpb.ShellcodeRDIReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_GetCompiler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).GetCompiler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/GetCompiler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).GetCompiler(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_Websites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).Websites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/Websites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).Websites(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_Website_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Website)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).Website(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/Website",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).Website(ctx, req.(*clientpb.Website))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_WebsiteRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Website)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).WebsiteRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/WebsiteRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).WebsiteRemove(ctx, req.(*clientpb.Website))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_WebsiteAddContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.WebsiteAddContent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).WebsiteAddContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/WebsiteAddContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).WebsiteAddContent(ctx, req.(*clientpb.WebsiteAddContent))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_WebsiteUpdateContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.WebsiteAddContent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).WebsiteUpdateContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/WebsiteUpdateContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).WebsiteUpdateContent(ctx, req.(*clientpb.WebsiteAddContent))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_WebsiteRemoveContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.WebsiteRemoveContent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).WebsiteRemoveContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/WebsiteRemoveContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).WebsiteRemoveContent(ctx, req.(*clientpb.WebsiteRemoveContent))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sliverpb.Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).Ping(ctx, req.(*sliverpb.Ping))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_Ps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sliverpb.PsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).Ps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/Ps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).Ps(ctx, req.(*sliverpb.PsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_Terminate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sliverpb.TerminateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).Terminate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/Terminate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).Terminate(ctx, req.(*sliverpb.TerminateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_Ifconfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sliverpb.IfconfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).Ifconfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/Ifconfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).Ifconfig(ctx, req.(*sliverpb.IfconfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_Netstat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sliverpb.NetstatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).Netstat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/Netstat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).Netstat(ctx, req.(*sliverpb.NetstatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_Ls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sliverpb.LsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).Ls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/Ls",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).Ls(ctx, req.(*sliverpb.LsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_Cd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sliverpb.CdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).Cd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/Cd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).Cd(ctx, req.(*sliverpb.CdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_Pwd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sliverpb.PwdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).Pwd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/Pwd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).Pwd(ctx, req.(*sliverpb.PwdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_Rm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sliverpb.RmReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).Rm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/Rm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).Rm(ctx, req.(*sliverpb.RmReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_Mkdir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sliverpb.MkdirReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).Mkdir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/Mkdir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).Mkdir(ctx, req.(*sliverpb.MkdirReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_Download_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sliverpb.DownloadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).Download(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/Download",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).Download(ctx, req.(*sliverpb.DownloadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_Upload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sliverpb.UploadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).Upload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/Upload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).Upload(ctx, req.(*sliverpb.UploadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_ProcessDump_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sliverpb.ProcessDumpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).ProcessDump(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/ProcessDump",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).ProcessDump(ctx, req.(*sliverpb.ProcessDumpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_RunAs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sliverpb.RunAsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).RunAs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/RunAs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).RunAs(ctx, req.(*sliverpb.RunAsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_Impersonate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sliverpb.ImpersonateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).Impersonate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/Impersonate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).Impersonate(ctx, req.(*sliverpb.ImpersonateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_RevToSelf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sliverpb.RevToSelfReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).RevToSelf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/RevToSelf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).RevToSelf(ctx, req.(*sliverpb.RevToSelfReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_GetSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.GetSystemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).GetSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/GetSystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).GetSystem(ctx, req.(*clientpb.GetSystemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_Task_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sliverpb.TaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).Task(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/Task",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).Task(ctx, req.(*sliverpb.TaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_Msf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.MSFReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).Msf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/Msf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).Msf(ctx, req.(*clientpb.MSFReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_MsfRemote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.MSFRemoteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).MsfRemote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/MsfRemote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).MsfRemote(ctx, req.(*clientpb.MSFRemoteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_ExecuteAssembly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sliverpb.ExecuteAssemblyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).ExecuteAssembly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/ExecuteAssembly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).ExecuteAssembly(ctx, req.(*sliverpb.ExecuteAssemblyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_Migrate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.MigrateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).Migrate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/Migrate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).Migrate(ctx, req.(*clientpb.MigrateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sliverpb.ExecuteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).Execute(ctx, req.(*sliverpb.ExecuteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_ExecuteToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sliverpb.ExecuteTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).ExecuteToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/ExecuteToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).ExecuteToken(ctx, req.(*sliverpb.ExecuteTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_Sideload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sliverpb.SideloadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).Sideload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/Sideload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).Sideload(ctx, req.(*sliverpb.SideloadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_SpawnDll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sliverpb.InvokeSpawnDllReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).SpawnDll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/SpawnDll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).SpawnDll(ctx, req.(*sliverpb.InvokeSpawnDllReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_Screenshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sliverpb.ScreenshotReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).Screenshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/Screenshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).Screenshot(ctx, req.(*sliverpb.ScreenshotReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_PivotStartListener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sliverpb.PivotStartListenerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).PivotStartListener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/PivotStartListener",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).PivotStartListener(ctx, req.(*sliverpb.PivotStartListenerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_PivotStopListener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sliverpb.PivotStopListenerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).PivotStopListener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/PivotStopListener",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).PivotStopListener(ctx, req.(*sliverpb.PivotStopListenerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_PivotSessionListeners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sliverpb.PivotListenersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).PivotSessionListeners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/PivotSessionListeners",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).PivotSessionListeners(ctx, req.(*sliverpb.PivotListenersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_PivotGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).PivotGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/PivotGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).PivotGraph(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_StartService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sliverpb.StartServiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).StartService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/StartService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).StartService(ctx, req.(*sliverpb.StartServiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_StopService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sliverpb.StopServiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).StopService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/StopService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).StopService(ctx, req.(*sliverpb.StopServiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_RemoveService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sliverpb.RemoveServiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).RemoveService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/RemoveService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).RemoveService(ctx, req.(*sliverpb.RemoveServiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_MakeToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sliverpb.MakeTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).MakeToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/MakeToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).MakeToken(ctx, req.(*sliverpb.MakeTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_GetEnv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sliverpb.EnvReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).GetEnv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/GetEnv",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).GetEnv(ctx, req.(*sliverpb.EnvReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_SetEnv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sliverpb.SetEnvReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).SetEnv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/SetEnv",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).SetEnv(ctx, req.(*sliverpb.SetEnvReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_UnsetEnv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sliverpb.UnsetEnvReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).UnsetEnv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/UnsetEnv",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).UnsetEnv(ctx, req.(*sliverpb.UnsetEnvReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_Backdoor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sliverpb.BackdoorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).Backdoor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/Backdoor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).Backdoor(ctx, req.(*sliverpb.BackdoorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_RegistryRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sliverpb.RegistryReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).RegistryRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/RegistryRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).RegistryRead(ctx, req.(*sliverpb.RegistryReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_RegistryWrite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sliverpb.RegistryWriteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).RegistryWrite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/RegistryWrite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).RegistryWrite(ctx, req.(*sliverpb.RegistryWriteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_RegistryCreateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sliverpb.RegistryCreateKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).RegistryCreateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/RegistryCreateKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).RegistryCreateKey(ctx, req.(*sliverpb.RegistryCreateKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_RegistryDeleteKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sliverpb.RegistryDeleteKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).RegistryDeleteKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/RegistryDeleteKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).RegistryDeleteKey(ctx, req.(*sliverpb.RegistryDeleteKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_RegistryListSubKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sliverpb.RegistrySubKeyListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).RegistryListSubKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/RegistryListSubKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).RegistryListSubKeys(ctx, req.(*sliverpb.RegistrySubKeyListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_RegistryListValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sliverpb.RegistryListValuesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).RegistryListValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/RegistryListValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).RegistryListValues(ctx, req.(*sliverpb.RegistryListValuesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_RunSSHCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sliverpb.SSHCommandReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).RunSSHCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/RunSSHCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).RunSSHCommand(ctx, req.(*sliverpb.SSHCommandReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_HijackDLL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.DllHijackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).HijackDLL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/HijackDLL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).HijackDLL(ctx, req.(*clientpb.DllHijackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_GetPrivs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sliverpb.GetPrivsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).GetPrivs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/GetPrivs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).GetPrivs(ctx, req.(*sliverpb.GetPrivsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_OpenSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sliverpb.OpenSession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).OpenSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/OpenSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).OpenSession(ctx, req.(*sliverpb.OpenSession))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_CloseSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sliverpb.CloseSession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).CloseSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/CloseSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).CloseSession(ctx, req.(*sliverpb.CloseSession))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_RegisterExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sliverpb.RegisterExtensionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).RegisterExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/RegisterExtension",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).RegisterExtension(ctx, req.(*sliverpb.RegisterExtensionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_CallExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sliverpb.CallExtensionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).CallExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/CallExtension",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).CallExtension(ctx, req.(*sliverpb.CallExtensionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_ListExtensions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sliverpb.ListExtensionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).ListExtensions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/ListExtensions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).ListExtensions(ctx, req.(*sliverpb.ListExtensionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_WGStartPortForward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sliverpb.WGPortForwardStartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).WGStartPortForward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/WGStartPortForward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).WGStartPortForward(ctx, req.(*sliverpb.WGPortForwardStartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_WGStopPortForward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sliverpb.WGPortForwardStopReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).WGStopPortForward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/WGStopPortForward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).WGStopPortForward(ctx, req.(*sliverpb.WGPortForwardStopReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_WGStartSocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sliverpb.WGSocksStartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).WGStartSocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/WGStartSocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).WGStartSocks(ctx, req.(*sliverpb.WGSocksStartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_WGStopSocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sliverpb.WGSocksStopReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).WGStopSocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/WGStopSocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).WGStopSocks(ctx, req.(*sliverpb.WGSocksStopReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_WGListForwarders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sliverpb.WGTCPForwardersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).WGListForwarders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/WGListForwarders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).WGListForwarders(ctx, req.(*sliverpb.WGTCPForwardersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_WGListSocksServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sliverpb.WGSocksServersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).WGListSocksServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/WGListSocksServers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).WGListSocksServers(ctx, req.(*sliverpb.WGSocksServersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_Shell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sliverpb.ShellReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).Shell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/Shell",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).Shell(ctx, req.(*sliverpb.ShellReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_Portfwd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sliverpb.PortfwdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).Portfwd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/Portfwd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).Portfwd(ctx, req.(*sliverpb.PortfwdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_CreateSocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sliverpb.Socks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).CreateSocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/CreateSocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).CreateSocks(ctx, req.(*sliverpb.Socks))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_CloseSocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sliverpb.Socks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).CloseSocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/CloseSocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).CloseSocks(ctx, req.(*sliverpb.Socks))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_SocksProxy_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SliverRPCServer).SocksProxy(&sliverRPCSocksProxyServer{stream})
}

type SliverRPC_SocksProxyServer interface {
	Send(*sliverpb.SocksData) error
	Recv() (*sliverpb.SocksData, error)
	grpc.ServerStream
}

type sliverRPCSocksProxyServer struct {
	grpc.ServerStream
}

func (x *sliverRPCSocksProxyServer) Send(m *sliverpb.SocksData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sliverRPCSocksProxyServer) Recv() (*sliverpb.SocksData, error) {
	m := new(sliverpb.SocksData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SliverRPC_CreateTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sliverpb.Tunnel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).CreateTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/CreateTunnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).CreateTunnel(ctx, req.(*sliverpb.Tunnel))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_CloseTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sliverpb.Tunnel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).CloseTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.SliverRPC/CloseTunnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).CloseTunnel(ctx, req.(*sliverpb.Tunnel))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_TunnelData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SliverRPCServer).TunnelData(&sliverRPCTunnelDataServer{stream})
}

type SliverRPC_TunnelDataServer interface {
	Send(*sliverpb.TunnelData) error
	Recv() (*sliverpb.TunnelData, error)
	grpc.ServerStream
}

type sliverRPCTunnelDataServer struct {
	grpc.ServerStream
}

func (x *sliverRPCTunnelDataServer) Send(m *sliverpb.TunnelData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sliverRPCTunnelDataServer) Recv() (*sliverpb.TunnelData, error) {
	m := new(sliverpb.TunnelData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SliverRPC_Events_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(commonpb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SliverRPCServer).Events(m, &sliverRPCEventsServer{stream})
}

type SliverRPC_EventsServer interface {
	Send(*clientpb.Event) error
	grpc.ServerStream
}

type sliverRPCEventsServer struct {
	grpc.ServerStream
}

func (x *sliverRPCEventsServer) Send(m *clientpb.Event) error {
	return x.ServerStream.SendMsg(m)
}

// SliverRPC_ServiceDesc is the grpc.ServiceDesc for SliverRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SliverRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpcpb.SliverRPC",
	HandlerType: (*SliverRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersion",
			Handler:    _SliverRPC_GetVersion_Handler,
		},
		{
			MethodName: "GetOperators",
			Handler:    _SliverRPC_GetOperators_Handler,
		},
		{
			MethodName: "Kill",
			Handler:    _SliverRPC_Kill_Handler,
		},
		{
			MethodName: "GetSessions",
			Handler:    _SliverRPC_GetSessions_Handler,
		},
		{
			MethodName: "UpdateSession",
			Handler:    _SliverRPC_UpdateSession_Handler,
		},
		{
			MethodName: "GetBeacons",
			Handler:    _SliverRPC_GetBeacons_Handler,
		},
		{
			MethodName: "GetBeacon",
			Handler:    _SliverRPC_GetBeacon_Handler,
		},
		{
			MethodName: "RmBeacon",
			Handler:    _SliverRPC_RmBeacon_Handler,
		},
		{
			MethodName: "GetBeaconTasks",
			Handler:    _SliverRPC_GetBeaconTasks_Handler,
		},
		{
			MethodName: "GetBeaconTaskContent",
			Handler:    _SliverRPC_GetBeaconTaskContent_Handler,
		},
		{
			MethodName: "MonitorStart",
			Handler:    _SliverRPC_MonitorStart_Handler,
		},
		{
			MethodName: "MonitorStop",
			Handler:    _SliverRPC_MonitorStop_Handler,
		},
		{
			MethodName: "GetJobs",
			Handler:    _SliverRPC_GetJobs_Handler,
		},
		{
			MethodName: "KillJob",
			Handler:    _SliverRPC_KillJob_Handler,
		},
		{
			MethodName: "StartMTLSListener",
			Handler:    _SliverRPC_StartMTLSListener_Handler,
		},
		{
			MethodName: "StartWGListener",
			Handler:    _SliverRPC_StartWGListener_Handler,
		},
		{
			MethodName: "StartDNSListener",
			Handler:    _SliverRPC_StartDNSListener_Handler,
		},
		{
			MethodName: "StartHTTPSListener",
			Handler:    _SliverRPC_StartHTTPSListener_Handler,
		},
		{
			MethodName: "StartHTTPListener",
			Handler:    _SliverRPC_StartHTTPListener_Handler,
		},
		{
			MethodName: "StartTCPStagerListener",
			Handler:    _SliverRPC_StartTCPStagerListener_Handler,
		},
		{
			MethodName: "StartHTTPStagerListener",
			Handler:    _SliverRPC_StartHTTPStagerListener_Handler,
		},
		{
			MethodName: "LootAdd",
			Handler:    _SliverRPC_LootAdd_Handler,
		},
		{
			MethodName: "LootRm",
			Handler:    _SliverRPC_LootRm_Handler,
		},
		{
			MethodName: "LootUpdate",
			Handler:    _SliverRPC_LootUpdate_Handler,
		},
		{
			MethodName: "LootContent",
			Handler:    _SliverRPC_LootContent_Handler,
		},
		{
			MethodName: "LootAll",
			Handler:    _SliverRPC_LootAll_Handler,
		},
		{
			MethodName: "LootAllOf",
			Handler:    _SliverRPC_LootAllOf_Handler,
		},
		{
			MethodName: "Hosts",
			Handler:    _SliverRPC_Hosts_Handler,
		},
		{
			MethodName: "Host",
			Handler:    _SliverRPC_Host_Handler,
		},
		{
			MethodName: "HostRm",
			Handler:    _SliverRPC_HostRm_Handler,
		},
		{
			MethodName: "HostIOCRm",
			Handler:    _SliverRPC_HostIOCRm_Handler,
		},
		{
			MethodName: "Generate",
			Handler:    _SliverRPC_Generate_Handler,
		},
		{
			MethodName: "Regenerate",
			Handler:    _SliverRPC_Regenerate_Handler,
		},
		{
			MethodName: "ImplantBuilds",
			Handler:    _SliverRPC_ImplantBuilds_Handler,
		},
		{
			MethodName: "DeleteImplantBuild",
			Handler:    _SliverRPC_DeleteImplantBuild_Handler,
		},
		{
			MethodName: "Canaries",
			Handler:    _SliverRPC_Canaries_Handler,
		},
		{
			MethodName: "GenerateWGClientConfig",
			Handler:    _SliverRPC_GenerateWGClientConfig_Handler,
		},
		{
			MethodName: "GenerateUniqueIP",
			Handler:    _SliverRPC_GenerateUniqueIP_Handler,
		},
		{
			MethodName: "ImplantProfiles",
			Handler:    _SliverRPC_ImplantProfiles_Handler,
		},
		{
			MethodName: "DeleteImplantProfile",
			Handler:    _SliverRPC_DeleteImplantProfile_Handler,
		},
		{
			MethodName: "SaveImplantProfile",
			Handler:    _SliverRPC_SaveImplantProfile_Handler,
		},
		{
			MethodName: "MsfStage",
			Handler:    _SliverRPC_MsfStage_Handler,
		},
		{
			MethodName: "ShellcodeRDI",
			Handler:    _SliverRPC_ShellcodeRDI_Handler,
		},
		{
			MethodName: "GetCompiler",
			Handler:    _SliverRPC_GetCompiler_Handler,
		},
		{
			MethodName: "Websites",
			Handler:    _SliverRPC_Websites_Handler,
		},
		{
			MethodName: "Website",
			Handler:    _SliverRPC_Website_Handler,
		},
		{
			MethodName: "WebsiteRemove",
			Handler:    _SliverRPC_WebsiteRemove_Handler,
		},
		{
			MethodName: "WebsiteAddContent",
			Handler:    _SliverRPC_WebsiteAddContent_Handler,
		},
		{
			MethodName: "WebsiteUpdateContent",
			Handler:    _SliverRPC_WebsiteUpdateContent_Handler,
		},
		{
			MethodName: "WebsiteRemoveContent",
			Handler:    _SliverRPC_WebsiteRemoveContent_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _SliverRPC_Ping_Handler,
		},
		{
			MethodName: "Ps",
			Handler:    _SliverRPC_Ps_Handler,
		},
		{
			MethodName: "Terminate",
			Handler:    _SliverRPC_Terminate_Handler,
		},
		{
			MethodName: "Ifconfig",
			Handler:    _SliverRPC_Ifconfig_Handler,
		},
		{
			MethodName: "Netstat",
			Handler:    _SliverRPC_Netstat_Handler,
		},
		{
			MethodName: "Ls",
			Handler:    _SliverRPC_Ls_Handler,
		},
		{
			MethodName: "Cd",
			Handler:    _SliverRPC_Cd_Handler,
		},
		{
			MethodName: "Pwd",
			Handler:    _SliverRPC_Pwd_Handler,
		},
		{
			MethodName: "Rm",
			Handler:    _SliverRPC_Rm_Handler,
		},
		{
			MethodName: "Mkdir",
			Handler:    _SliverRPC_Mkdir_Handler,
		},
		{
			MethodName: "Download",
			Handler:    _SliverRPC_Download_Handler,
		},
		{
			MethodName: "Upload",
			Handler:    _SliverRPC_Upload_Handler,
		},
		{
			MethodName: "ProcessDump",
			Handler:    _SliverRPC_ProcessDump_Handler,
		},
		{
			MethodName: "RunAs",
			Handler:    _SliverRPC_RunAs_Handler,
		},
		{
			MethodName: "Impersonate",
			Handler:    _SliverRPC_Impersonate_Handler,
		},
		{
			MethodName: "RevToSelf",
			Handler:    _SliverRPC_RevToSelf_Handler,
		},
		{
			MethodName: "GetSystem",
			Handler:    _SliverRPC_GetSystem_Handler,
		},
		{
			MethodName: "Task",
			Handler:    _SliverRPC_Task_Handler,
		},
		{
			MethodName: "Msf",
			Handler:    _SliverRPC_Msf_Handler,
		},
		{
			MethodName: "MsfRemote",
			Handler:    _SliverRPC_MsfRemote_Handler,
		},
		{
			MethodName: "ExecuteAssembly",
			Handler:    _SliverRPC_ExecuteAssembly_Handler,
		},
		{
			MethodName: "Migrate",
			Handler:    _SliverRPC_Migrate_Handler,
		},
		{
			MethodName: "Execute",
			Handler:    _SliverRPC_Execute_Handler,
		},
		{
			MethodName: "ExecuteToken",
			Handler:    _SliverRPC_ExecuteToken_Handler,
		},
		{
			MethodName: "Sideload",
			Handler:    _SliverRPC_Sideload_Handler,
		},
		{
			MethodName: "SpawnDll",
			Handler:    _SliverRPC_SpawnDll_Handler,
		},
		{
			MethodName: "Screenshot",
			Handler:    _SliverRPC_Screenshot_Handler,
		},
		{
			MethodName: "PivotStartListener",
			Handler:    _SliverRPC_PivotStartListener_Handler,
		},
		{
			MethodName: "PivotStopListener",
			Handler:    _SliverRPC_PivotStopListener_Handler,
		},
		{
			MethodName: "PivotSessionListeners",
			Handler:    _SliverRPC_PivotSessionListeners_Handler,
		},
		{
			MethodName: "PivotGraph",
			Handler:    _SliverRPC_PivotGraph_Handler,
		},
		{
			MethodName: "StartService",
			Handler:    _SliverRPC_StartService_Handler,
		},
		{
			MethodName: "StopService",
			Handler:    _SliverRPC_StopService_Handler,
		},
		{
			MethodName: "RemoveService",
			Handler:    _SliverRPC_RemoveService_Handler,
		},
		{
			MethodName: "MakeToken",
			Handler:    _SliverRPC_MakeToken_Handler,
		},
		{
			MethodName: "GetEnv",
			Handler:    _SliverRPC_GetEnv_Handler,
		},
		{
			MethodName: "SetEnv",
			Handler:    _SliverRPC_SetEnv_Handler,
		},
		{
			MethodName: "UnsetEnv",
			Handler:    _SliverRPC_UnsetEnv_Handler,
		},
		{
			MethodName: "Backdoor",
			Handler:    _SliverRPC_Backdoor_Handler,
		},
		{
			MethodName: "RegistryRead",
			Handler:    _SliverRPC_RegistryRead_Handler,
		},
		{
			MethodName: "RegistryWrite",
			Handler:    _SliverRPC_RegistryWrite_Handler,
		},
		{
			MethodName: "RegistryCreateKey",
			Handler:    _SliverRPC_RegistryCreateKey_Handler,
		},
		{
			MethodName: "RegistryDeleteKey",
			Handler:    _SliverRPC_RegistryDeleteKey_Handler,
		},
		{
			MethodName: "RegistryListSubKeys",
			Handler:    _SliverRPC_RegistryListSubKeys_Handler,
		},
		{
			MethodName: "RegistryListValues",
			Handler:    _SliverRPC_RegistryListValues_Handler,
		},
		{
			MethodName: "RunSSHCommand",
			Handler:    _SliverRPC_RunSSHCommand_Handler,
		},
		{
			MethodName: "HijackDLL",
			Handler:    _SliverRPC_HijackDLL_Handler,
		},
		{
			MethodName: "GetPrivs",
			Handler:    _SliverRPC_GetPrivs_Handler,
		},
		{
			MethodName: "OpenSession",
			Handler:    _SliverRPC_OpenSession_Handler,
		},
		{
			MethodName: "CloseSession",
			Handler:    _SliverRPC_CloseSession_Handler,
		},
		{
			MethodName: "RegisterExtension",
			Handler:    _SliverRPC_RegisterExtension_Handler,
		},
		{
			MethodName: "CallExtension",
			Handler:    _SliverRPC_CallExtension_Handler,
		},
		{
			MethodName: "ListExtensions",
			Handler:    _SliverRPC_ListExtensions_Handler,
		},
		{
			MethodName: "WGStartPortForward",
			Handler:    _SliverRPC_WGStartPortForward_Handler,
		},
		{
			MethodName: "WGStopPortForward",
			Handler:    _SliverRPC_WGStopPortForward_Handler,
		},
		{
			MethodName: "WGStartSocks",
			Handler:    _SliverRPC_WGStartSocks_Handler,
		},
		{
			MethodName: "WGStopSocks",
			Handler:    _SliverRPC_WGStopSocks_Handler,
		},
		{
			MethodName: "WGListForwarders",
			Handler:    _SliverRPC_WGListForwarders_Handler,
		},
		{
			MethodName: "WGListSocksServers",
			Handler:    _SliverRPC_WGListSocksServers_Handler,
		},
		{
			MethodName: "Shell",
			Handler:    _SliverRPC_Shell_Handler,
		},
		{
			MethodName: "Portfwd",
			Handler:    _SliverRPC_Portfwd_Handler,
		},
		{
			MethodName: "CreateSocks",
			Handler:    _SliverRPC_CreateSocks_Handler,
		},
		{
			MethodName: "CloseSocks",
			Handler:    _SliverRPC_CloseSocks_Handler,
		},
		{
			MethodName: "CreateTunnel",
			Handler:    _SliverRPC_CreateTunnel_Handler,
		},
		{
			MethodName: "CloseTunnel",
			Handler:    _SliverRPC_CloseTunnel_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SocksProxy",
			Handler:       _SliverRPC_SocksProxy_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "TunnelData",
			Handler:       _SliverRPC_TunnelData_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Events",
			Handler:       _SliverRPC_Events_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpcpb/services.proto",
}
