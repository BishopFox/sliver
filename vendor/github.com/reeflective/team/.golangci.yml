
# ************************************************************************************* #
#                         Golang CI Lint Global Configuration                           #
# ************************************************************************************* #

# This configuration is divided into several subsections:
# - Options for analysis running
# - Enabled/disabled linters
# - Other exclusions & Issues management 
# - Issues severity management
# - Per-linter configurations

#
# -------------------------- Options for analysis running -------------------------- #
#
run:
  #
  # ***** Tests ****
  #
  # Include test files or not.
  # Default: true
  tests: true

  #
  # ***** Ignored directories, files & patterns *****
  #
  # Which dirs to skip: issues from them won't be reported.
  # Can use regexp here: `generated.*`, regexp is applied on full path.
  # Default value is empty list,
  # but default dirs are skipped independently of this option's value (see skip-dirs-use-default).
  # "/" will be replaced by current OS file path separator to properly work on Windows.
  # skip-dirs:
  
  # Enables skipping of directories:
  # - vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
  # Default: true
  skip-dirs-use-default: true

  # Which files to skip: they will be analyzed, but issues from them won't be reported.
  # Default value is empty list,
  # but there is no need to include all autogenerated files,
  # we confidently recognize autogenerated files.
  # If it's not please let us know.
  # "/" will be replaced by current OS file path separator to properly work on Windows.
  # skip-files:
  #   - ".*\\.my\\.go$"
  #   - lib/bad.go
   
  #
  # ***** Dependencies & Modules *****
  #
  # If set we pass it to "go list -mod={option}". From "go help modules":
  # If invoked with -mod=readonly, the go command is disallowed from the implicit
  # automatic updating of go.mod described above. Instead, it fails when any changes
  # to go.mod are needed. This setting is most useful to check that go.mod does
  # not need updates, such as in a continuous integration and testing system.
  # If invoked with -mod=vendor, the go command assumes that the vendor
  # directory holds the correct copies of dependencies and ignores
  # the dependency descriptions in go.mod.
  #
  # Allowed values: readonly|vendor|mod
  # By default, it isn't set.
  modules-download-mode: readonly # NOT SURE WHICH ONE TO USE BY DEFAULT

  #
  # ***** Other *****
  #
  # Allow multiple parallel golangci-lint instances running.
  # If false (default) - golangci-lint acquires file lock on start.
  allow-parallel-runners: true 

  # Specific go build tags
  build-tags:
    - go_sqlite


#
# -------------------------- Output Configuration Options --------------------------- #
#
# output:
  # Format: colored-line-number|line-number|json|tab|checkstyle|code-climate|junit-xml|github-actions
  #
  # Multiple can be specified by separating them by comma, output can be provided
  # for each of them by separating format name and path by colon symbol.
  # Output path can be either `stdout`, `stderr` or path to the file to write to.
  # Example: "checkstyle:report.json,colored-line-number"
  #
  # Default: colored-line-number
  # format: json
  # Print lines of code with issue.
  # Default: true
  # print-issued-lines: false
  # Print linter name in the end of issue text.
  # Default: true
  # print-linter-name: false
  # Make issues output unique by line.
  # Default: true
  # uniq-by-line: false
  # Add a prefix to the output file references.
  # Default is no prefix.
  # path-prefix: ""
  # Sort results by: filepath, line and column.
  # sort-results: false

#
# ------------------------------------- Linters ------------------------------------ #
#
linters:
  # Disable all linters.
  # disable-all: true
   
  # Enable presets. Used to enable entire sets of linters based on their "tags".
  # Some of these enabled sets might be redundant with the explicitly & individually
  # enabled linters above, so pay attention to what you want to do.
  # Also, some linters are explicitly deactived in some section below, which might
  # be undesired behavior to you.
  # https://golangci-lint.run/usage/linters
  presets:
    - bugs
    - comment
    - complexity
    - error
    - format
    - import
    - metalinter
    - module
    - performance
    # - sql
    - style
    - test
    - unused

  # Enable specific linter
  # https://golangci-lint.run/usage/linters/#enabled-by-default-linters
  #
  # Example line:
  # - lintername  # Description ()
  # where:
  # () means the linter is not fast, and not auto-fix capable
  # (fast) means the linter is only fast
  # (auto) means the linter can auto-fix its detected issues.
  #
  enable:
    # Linters enabled by default (commented out in list of disabled linters below)
    # - deadcode    # Finds unused code ()
    - errcheck    # Finds unchecked errors in Go programs ()
    - gosimple    # Specializes in simplifying a code ()
    - govet       # Reports suspicious constructs, such as Printf calls with wrong args ()
    - ineffassign # Detects when assignments to existing variables are not used (fast)
    - staticcheck # A ton of static analysis checks ()
    # - structcheck # Finds unused struct fields ()
    - unused      # Checks for unused constants, variables, functions and types ()
    # - varcheck    # Finds unused global variables and constants ()

    # Other linters (not enabled by default, thus optional)
    # - asciicheck    # Checks that code does not contain non-ASCII identifiers (bugs, style)
    - bidichk         # checks for dangerous unicode character sequences          (bugs)
    - bodyclose       # checks HTTP response body is closed successfully          (perf,bugs)
    - containedctx    # detects struct-contained context.Context field            (style)
    - contextcheck    # check the function use a non-inherited context            (bugs)
    - cyclop          # checks function and package cyclomatic complexity         (cplx)
    - decorder        # checks declaration order/count of types/consts/vars/funcs (fmt,style)
    # - depguard        # checks if imports are in a list of acceptable packages    (style,imp,mod)
    - dogsled         # checks assignments with too many blank identifiers        (style)
    - dupl            # tool for code clone detection                             (style)
    - durationcheck   # checks for two durations multiplied together              (bugs)
    - errchkjson      # checks types passed to JSON encoding functions & related  (bugs)
    - errname         # checks that sentinel errors are prefix with Err           (style)
    - errorlint       # finds potential problems with Go 1.13 error wrap scheme   (bugs, err)
    # - exhaustive      # checks exhaustiveness of enum switch statements           (bugs)
    # - exhaustivestruct # checks if all struct fields are initialized              (style,test)
    - exportloopref   # checks for pointers to enclosing loop variables           (bugs)
    # - forbidigo       # Forbids identifiers                                       (style)
    - forcetypeassert # finds forced type assertions                              (style)
    - funlen          # tool for detection of long functions                      (cplx)
    # - gci             # Controls package import order and makes deterministic     (fmt,import)
    # - gochecknoglobals # checks that no global variables exist                    (style)
    # - gochecknoinits  # checks that no init functions are present                 (style)
    - gocognit        # computes and checks the cognitive complexity of functions (cplx)
    - goconst         # finds repeated strings that can be replaced by a constant (style)
    - gocritic        # diagnostics for bugs/perf/style issues. Extensible        (style,meta)
    - gocyclo         # computes and checks cyclomatic complexity of functions    (cplx)
    - godot           # checks if comments end in a period                        (style,cmt)
    - godox           # tool for detection of FIXME, TODO and other comments      (style,cmt)
    - goerr113        # checks the errors handling expressions                    (style,err)
    # - gofmt           # formats and checks for code simplification                (fmt)
    - gofumpt         # checks whether code was gofumpt-ed                        (fmt)
    - goheader        # checks if file header matches to pattern                  (style)
    - goimports       # fixes imports, formats code same as gofmt                 (fmt,import)
    # - golint          # Deprecated 
    - gomnd           # analyzer to detect magic numbers                          (style)
    - gomoddirectives # manage replace/retract/excludes directives in go.mod      (style,mod)
    # - gomodguard      # allow/block for direct module deps.                   (style,imp,mod)
    - goprintffuncname # check that printf-like funcs are named with f at end     (style)
    - gosec           # inspect code for security problems                        (bugs)
    - grouper         # analyzer to analyze expression groups                     (style)
    # - ifshort         # checks that code uses short syntax for if statements      (style)
    - importas        # enforces consistent import aliases                        (style)
    # - interfacer      # Deprecated
    - ireturn         # accept Interfaces, return Concrete Types                  (style)
    # - lll             # Report long lines                                         (style)
    - maintidx        # measures the maintainability index of each function       (cplx)
    - makezero        # finds slice declarations with non-zero initial length     (style,bugs)
    # - maligned        # Deprecated
    - misspell        # finds commonly misspelled English words in comments       (style,cmt)
    - nakedret        # finds naked returns in functions greater than spec len    (style)
    - nestif          # reports deeply nested if statements                       (cplx)
    - nilerr          # finds code returning nil even if checks error not nil     (bugs)
    - nilnil          # checks no simultaneous return of nil err and invalid value (style)
    # - nlreturn        # checks for a new line before return and branch statements (style)
    - noctx           # fnds sending HTTP requests without context.Context        (perf,bugs)
    - nolintlint      # reports ill-formed or insufficient nolint directives      (style)
    - paralleltest    # detects missing usage of t.Parallel() in your tests       (style,test)
    - prealloc        # finds slice declarations that could be preallocated       (perf)
    - predeclared     # finds code shadowing one of Go's predeclared identifiers  (style)
    # - promlinter      # checks Prometheus metrics naming via promlint
    - revive          # fast,extensible,flexible linter. Replacement of golint    (style,meta)
    # - rowserrcheck    # checks if Err of rows is checked successfully             (bugs,sql)
    # - scopelint       # Deprecated
    # - sqlclosecheck   # checks that sql.Rows and sql.Stmt are closed              (bugs,sql)
    # - stylecheck      # replacement for golint                                    (style)
    # - tagliatelle     # checks struct tags                                        (style)
    - tenv            # detects using os.Setenv instead of t.Setenv since go1.17  (style)
    # - testpackage     # makes you use a separate _test package                    (style,test)
    - thelper         # detects test helpers without t.Helper(), checks consistent (style)
    - tparallel       # detects inappropriate use of t.Parallel() in your tests   (style,test)
    # - typecheck   # Like the front-end of the Go compiler, parses and type-checks Go code ()
    - unconvert       # remove unnecessary type convertions                       (style)
    - unparam         # reports unused function parameters                        (unused)
    - varnamelen      # checks that the length of a var name matches its scope    (style)
    - wastedassign    # finds wasted assignment statements                        (style)
    # - whitespace      # detection of leading and trailing whitespace              (style)
    # - wrapcheck       # checks errors returned from external packages are wrapped (style,err)
    - wsl             # forces you to use empty lines !                           (style)
 
  # Enable all available linters.
  # enable-all: true

  # Disable specific linter
  # https://golangci-lint.run/usage/linters/#disabled-by-default-linters--e--enable
  disable:
    # Linters enabled by default (commented out in list of disabled linters below)
    # - deadcode
    # - errcheck
    # - gosimple
    # - govet
    # - ineffassign
    # - staticcheck
    # - structcheck
    - typecheck
    # - unused
    # - varcheck
    
    # Deactivated linters above (explicitly deactived here, so that `presets` section
    # above does not activate them again)
    - asciicheck    # Checks that code does not contain non-ASCII identifiers     (bugs,style)
    - depguard        # checks if imports are in list of acceptable pkgs      (style,imp,mod)
    - exhaustive      # checks exhaustiveness of enum switch statements           (bugs)
    - exhaustruct     # checks if all struct fields are initialized              (style,test)
    - exhaustivestruct # checks if all struct fields are initialized              (style,test)
    - forbidigo       # Forbids identifiers                                       (style)
    - gochecknoglobals # checks that no global variables exist                    (style)
    - gochecknoinits  # checks that no init functions are present                 (style)
    - lll             # Report long lines                                         (style)
    - promlinter      # checks Prometheus metrics naming via promlint
    - rowserrcheck    # checks if Err of rows is checked successfully             (bugs,sql)
    - sqlclosecheck   # checks that sql.Rows and sql.Stmt are closed              (bugs,sql)
    - stylecheck      # replacement for golint                                    (style)
    - testpackage     # makes you use a separate _test package                    (style,test)
    - whitespace      # detection of leading and trailing whitespace              (style)
    - nonamedreturns   
    - scopelint       # Deprecated
    - nlreturn        # checks for a new line before return and branch statements (style)
    - ifshort         # checks that code uses short syntax for if statements      (style)
    - deadcode    # Finds unused code ()
    - structcheck # Finds unused struct fields ()
    - varcheck    # Finds unused global variables and constants ()
    - gomodguard      # allow/block for direct module deps.                   (style,imp,mod)
    - musttag 
    - wrapcheck       # checks errors returned from external packages are wrapped (style,err)
    - tagliatelle     # checks struct tags                                        (style)
    - gofmt           # formats and checks for code simplification                (fmt)
    # - gofumpt         # checks whether code was gofumpt-ed                        (fmt)
    # - goimports       # fixes imports, formats code same as gofmt                 (fmt,import)
      
  # Run only fast linters from enabled linters set (first run won't be fast)
  # Default: false
  # fast: true


#
# ---------------------------------  Linter settings ------------------------------------ #
#

# This file contains only configs which differ from defaults.
# All possible options can be found here https://github.com/golangci/golangci-lint/blob/master/.golangci.reference.yml
linters-settings:
  cyclop:
    # The maximal code complexity to report.
    # Default: 10
    max-complexity: 30
    # The maximal average package complexity.
    # If it's higher than 0.0 (float) the check is enabled
    # Default: 0.0
    package-average: 10.0

  errcheck:
    # Report about not checking of errors in type assertions: `a := b.(MyStruct)`.
    # Such cases aren't reported by default.
    # Default: false
    check-type-assertions: true

  exhaustive:
    # Program elements to check for exhaustiveness.
    # Default: [ switch ]
    check:
      - switch
      - map

  funlen:
    # Checks the number of lines in a function.
    # If lower than 0, disable the check.
    # Default: 60
    lines: 100
    # Checks the number of statements in a function.
    # If lower than 0, disable the check.
    # Default: 40
    statements: 50

  gocognit:
    # Minimal code complexity to report
    # Default: 30 (but we recommend 10-20)
    min-complexity: 30 

  wsl:
    allow-cuddle-declarations: true
    allow-separated-leading-comment: true

  paralleltest:
    ignore-missing: true

  goimports:
    local-prefixes: github.com/reeflective/team

#
# ----------------------- Other exclusions & Issues management -------------------------- #
#
issues:
  # List of regexps of issue texts to exclude.
  #
  # But independently of this option we use default exclude patterns,
  # it can be disabled by `exclude-use-default: false`.
  # To list all excluded by default patterns execute `golangci-lint run --help`
  #
  # Default: []
  # exclude:
  #   - abcdef
   
  # Excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules:
    # Exclude some linters from running on tests files.
    - path: _test\.go
      linters:
        - gocyclo
        - errcheck
        - dupl
        - gosec

    # Exclude known linters from partially hard-vendored code,
    # which is impossible to exclude via `nolint` comments.
    # - path: internal/hmac/
    #   text: "weak cryptographic primitive"
    #   linters:
    #     - gosec
     
    # Exclude some `staticcheck` messages.
    # - linters:
    #     - staticcheck
    #   text: "SA9003:"

    # Exclude `lll` issues for long lines with `go:generate`.
    - linters:
        - lll
      source: "^//go:generate "

  # Independently of option `exclude` we use default exclude patterns,
  # it can be disabled by this option.
  # To list all excluded by default patterns execute `golangci-lint run --help`.
  # Default: true.
  # exclude-use-default: false
   
  # If set to true exclude and exclude-rules regular expressions become case-sensitive.
  # Default: false
  # exclude-case-sensitive: false

  # The list of ids of default excludes to include or disable.
  # Default: []
  # include:
  #   - EXC0002 # disable excluding of issues about comments from golint.

  # Maximum issues count per one linter.
  # Set to 0 to disable.
  # Default: 50
  # max-issues-per-linter: 0
  # Maximum count of issues with the same text.
  # Set to 0 to disable.
  # Default: 3
  max-same-issues: 0
  # Show only new issues: if there are unstaged changes or untracked files,
  # only those changes are analyzed, else only changes in HEAD~ are analyzed.
  # It's a super-useful option for integration of golangci-lint into existing large codebase.
  # It's not practical to fix all existing issues at the moment of integration:
  # much better don't allow issues in new code.
  #
  # Default: false.
  new: true
  # Show only new issues created after git revision `REV`.
  new-from-rev: HEAD
  # Show only new issues created in git patch with set file path.
  new-from-patch: path/to/patch/file
  # Fix found issues (if it's supported by the linter).
  fix : true

#
# ---------------------------- Issues severity manament -------------------------------- #
#
# severity:
  # Set the default severity for issues.
  #
  # If severity rules are defined and the issues do not match or no severity is provided to the rule
  # this will be the default severity applied.
  # Severities should match the supported severity names of the selected out format.
  # - Code climate: https://docs.codeclimate.com/docs/issues#issue-severity
  # - Checkstyle: https://checkstyle.sourceforge.io/property_types.html#severity
  # - GitHub: https://help.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-an-error-message
  #
  # Default value is an empty string.
  # default-severity: error
  # If set to true `severity-rules` regular expressions become case-sensitive.
  # Default: false
  # case-sensitive: true
  # When a list of severity rules are provided, severity information will be added to lint issues.
  # Severity rules have the same filtering capability as exclude rules
  # except you are allowed to specify one matcher per severity rule.
  # Only affects out formats that support setting severity information.
  #
  # Default: []
  # rules:
  #   - linters:
  #       - dupl
  #     severity: info

#
# ---------------------------- Per-linter Configuration -------------------------------- #
#
