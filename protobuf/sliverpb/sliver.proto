syntax = "proto3";
package sliverpb;
option go_package = "github.com/bishopfox/sliver/protobuf/sliverpb";

import "commonpb/common.proto";

/*
  
  >>> Reserved Numbers <<<

    For tunnel messages:
      uint64 TunnelID = 8 [jstype = JS_STRING]; // JS can't represent a uint64
      uint32 SessionID = 9;

    For request/response messages:
      Request Request = 9;
      Response Response = 9;
  
    - Request messages should be named with the suffix "Req"

*/

// Envelope - Used to encode implant<->server messages since we 
//            cannot use gRPC due to the various transports used.
message Envelope {
  uint64 ID = 1;   // Envelope ID used to track request/response
  uint32 Type = 2; // Message type
  bytes Data = 3;  // Actual message data

  bool UnknownMessageType = 4; // Set if the implant did not understand the message
}

// Register - First message the implant sends to the server
message Register {
  string Name = 1;
  string Hostname = 2;
  string Username = 3;
  string Uid = 4;
  string Gid = 5;
  string Os = 6;
  string Arch = 7;
  int32 Pid = 8;
  string Filename = 9;
  string ActiveC2 = 10;
  string Version = 11;
  uint32 ReconnectInterval = 12;
  // Network & transport information.
  string Transport = 13; 
  string RemoteAddr = 14;
}

// Ping - Not ICMP, just sends a rount trip message to an implant to
//        see if it's still responding.
message Ping {
  int32 Nonce = 1;

  // Ping is special
  commonpb.Response Response = 8;
  commonpb.Request Request = 9;
}

// KillSessionReq - Request the implant to kill a session
message KillSessionReq {
  bool Force = 1;

  commonpb.Request Request = 9;
}

// PsReq - Request the implant to list ses of a remote session.
message PsReq {
  commonpb.Request Request = 9;
}

message Ps {
  repeated commonpb.Process Processes = 1;

  commonpb.Response Response = 9;
}

// TerminateReq - Request the implant terminate a remote processes
message TerminateReq {
  int32 Pid = 1;
  bool Force = 2;

  commonpb.Request Request = 9;
}

message Terminate {
  int32 Pid = 1;

  commonpb.Response Response = 9;
}

// IfconfigReq - Request the implant to list network interfaces
message IfconfigReq {
  commonpb.Request Request = 9;
}

message Ifconfig {
  repeated NetInterface NetInterfaces = 1;

  commonpb.Response Response = 9;
}

message NetInterface {
  int32 Index = 1;
  string Name = 2;
  string MAC = 3;
  repeated string IPAddresses = 4;
}

message LsReq {
  string Path = 1;

  commonpb.Request Request = 9;
}

message Ls {
  string Path = 1;
  bool Exists = 2;
  repeated FileInfo Files = 3;

  commonpb.Response Response = 9;
}

message FileInfo {
  string Name = 1;
  bool IsDir = 2;
  int64 Size = 3;
}

message CdReq {
  string Path = 1;
  commonpb.Request Request = 9;
}

message PwdReq {
  commonpb.Request Request = 9;
}

message Pwd {
  string Path = 1;

  commonpb.Response Response = 9;
}

message RmReq {
  string Path = 1;
  bool Recursive = 2;
  bool Force = 3;

  commonpb.Request Request = 9;
}

message Rm {
  string Path = 1;

  commonpb.Response Response = 9;
}

message MkdirReq {
  string Path = 1;

  commonpb.Request Request = 9;
}

message Mkdir {
  string Path = 1;

  commonpb.Response Response = 9;
}

message DownloadReq {
  string Path = 1;

  commonpb.Request Request = 9;
}

message Download {
  string Path = 1;
  string Encoder = 2;
  bool Exists = 3;
  bytes Data = 4;

  commonpb.Response Response = 9;
}

message UploadReq {
  string Path = 1;
  string Encoder = 2;
  bytes Data = 3;

  commonpb.Request Request = 9;
}

message Upload {
  string Path = 1;

  commonpb.Response Response = 9;
}

message ProcessDumpReq {
  int32 Pid = 1;
  int32 Timeout = 2;

  commonpb.Request Request = 9;
}

message ProcessDump {
  bytes Data = 1;

  commonpb.Response Response = 9;
}

message RunAsReq {
  string Username = 1;
  string ProcessName = 2;
  string Args = 3;

  commonpb.Request Request = 9;
}

message RunAs {
  string Output = 1;

  commonpb.Response Response = 9;
}

message ImpersonateReq {
  string Username = 1;
  commonpb.Request Request = 9;
}

message Impersonate {
  commonpb.Response Response = 9;
}

message RevToSelfReq {
  commonpb.Request Request = 9;
}

message RevToSelf {
  commonpb.Response Response = 9;
}

// InvokeGetSystemReq - Implant-side version of GetSystemReq, this message
//                      contains the .Data based on the client's req.Config
message InvokeGetSystemReq {
  bytes Data = 1;
  string HostingProcess = 2;

  commonpb.Request Request = 9;
}

// GetSystem - The result of a InvokeGetSystemReq attempt
message GetSystem {

  commonpb.Response Response = 9;
}

message MakeTokenReq {
  string Username = 1;
  string Password = 2;
  string Domain = 3;

  commonpb.Request Request = 9;
}

message MakeToken {
  commonpb.Response Response = 9;
}

message TaskReq {
  string Encoder = 1;
  bool RWXPages = 2;
  uint32 Pid = 3;
  bytes Data = 4;

  commonpb.Request Request = 9;
}

message Task {
  commonpb.Response Response = 9;
}

message ExecuteAssemblyReq {
  bytes HostingDll = 1;
  bytes Assembly = 2;
  string Arguments = 3;
  string Process = 4;
  bool AmsiBypass = 5;
  bool EtwBypass = 6;
  uint32 Offset = 7;

  commonpb.Request Request = 9;
}

message ExecuteAssembly {
  bytes Output = 1;

  commonpb.Response Response = 9;
}

message InvokeMigrateReq {
  uint32 Pid = 1;
  bytes Data = 2;

  commonpb.Request Request = 9;
}

message Migrate {
  bool Success = 1;

  commonpb.Response Response = 9;
}

message ExecuteReq {
  string Path = 1;
  repeated string Args = 2;
  bool Output = 3;

  commonpb.Request Request = 9;
}

message Execute {
  string Result = 1;
  uint32 Status = 2;

  commonpb.Response Response = 9;
}

message SideloadReq {
  bytes Data = 1;
  string ProcessName = 2;
  string Args = 3;
  string EntryPoint = 4;

  commonpb.Request Request = 9;
}

message Sideload {
  string Result = 1;

  commonpb.Response Response = 9;
}

message SpawnDllReq {
  bytes Data = 1;
  string ProcessName = 2;
  uint32 Offset = 3;
  string Args = 4;

  commonpb.Request Request = 9;
}

message SpawnDll {
  string Result = 1;

  commonpb.Response Response = 9;
}

message NetstatReq {
  bool TCP = 1;
  bool UDP = 2;
  bool IP4 = 3;
  bool IP6 = 5;
  bool Listening = 6;

  commonpb.Request Request = 9;
}

message SockTabEntry {
  message SockAddr {
    string Ip = 1;
    uint32 Port = 2;
  }
  SockAddr LocalAddr = 1;
  SockAddr RemoteAddr = 2;
  string SkState = 3;
  uint32 UID = 4;
  commonpb.Process Process = 5;
  string Protocol = 6;
}

message Netstat {
  repeated SockTabEntry Entries = 1;

  commonpb.Response Response = 9;
}

message EnvReq {
  string Name = 1;
  commonpb.Request Request = 9;
}

message EnvInfo {
  repeated commonpb.EnvVar Variables = 1;
  commonpb.Response Response = 9;
}

// DNS Specific messages
message DNSSessionInit {
  bytes Key = 1;
}

message DNSPoll {
  repeated DNSBlockHeader blocks = 1;
}

message DNSBlockHeader {
  string ID = 1;
  uint32 Size = 2;
}

// HTTP Sepecific message
message HTTPSessionInit {
  bytes Key = 1;
}

// ScreenshotReq - Request the implant take a screenshot
message ScreenshotReq {
  commonpb.Request Request = 9;
}

message Screenshot {
  bytes Data = 1;

  commonpb.Response Response = 9;
}

message StartServiceReq {
  string ServiceName = 1;
  string ServiceDescription = 2;
  string BinPath = 3;
  string Hostname = 4;
  string Arguments = 5;
  commonpb.Request Request = 9;
}

message ServiceInfo {
  commonpb.Response Response = 9;
}

message ServiceInfoReq {
  string ServiceName = 1;
  string Hostname = 2;
}

message StopServiceReq {
  ServiceInfoReq ServiceInfo = 1;

  commonpb.Request Request = 9;
}

message RemoveServiceReq {
  ServiceInfoReq ServiceInfo = 1;

  commonpb.Request Request = 9;
}

message BackdoorReq {
  string FilePath = 1;
  string ProfileName = 2;

  commonpb.Request Request = 9;
}

message Backdoor {
  commonpb.Response Response = 9;
}

// Tunnel - Tunnel related messages

message Tunnel {
  uint64 TunnelID = 8 [jstype = JS_STRING];
  uint32 SessionID = 9;
}

message TunnelData {
  bytes Data  = 1;
  bool Closed = 2;
  uint64 Sequence = 3;

  uint64 TunnelID = 8 [jstype = JS_STRING];
  uint32 SessionID = 9;
}

// ShellReq - Request the implant open a realtime shell tunnel
message ShellReq{
  string Path = 1;
  bool EnablePTY = 2;
  uint32 Pid = 3;

  uint64 TunnelID = 8 [jstype = JS_STRING]; // Bind to this tunnel
  commonpb.Request Request = 9;
}

// Shell - Request the implant open a realtime shell tunnel
message Shell{
  string Path = 1;
  bool EnablePTY = 2;
  uint32 Pid = 3;

  uint64 TunnelID = 8 [jstype = JS_STRING];
  commonpb.Response Response = 9;
}

// Named Pipes Messages
message NamedPipesReq {
  string PipeName = 16;
  
  commonpb.Request Request = 9;
}

message NamedPipes {
  bool Success = 1;

  commonpb.Response Response = 9;
}

// TCP Messages for pivoting
message TCPPivotReq {
  string Address = 16;

  commonpb.Request Request = 9;
}

message TCPPivot {
  bool Success = 1;
  commonpb.Response Response = 9;
}

// Pivot transport
message PivotOpen {
  uint32 PivotID = 12;
  string PivotType = 13;
  string RemoteAddress = 14;
  bytes  RegisterMsg = 15;
}

message PivotClose {
  uint32 PivotID = 12;
  string Err = 2;
}

message PivotData {
  uint32 PivotID = 12;
  bytes Data = 2;
}


// Handlers --------------------------------------------------------------------

// Handler direction
enum HandlerType {
        Bind = 0;
        Reverse = 1;
}

// Application-layer protocol of traffic
enum ApplicationProtocol {
        HTTP = 0;
        HTTPS = 1;
        DNS = 2;
        QUIC = 3; 
        NamedPipe = 4;
        FTP = 5;
        SMTP = 6;
        Socks5 = 7;
        MTLS = 10;
}

// Transport-layer protocol of traffic
enum TransportProtocol {
        IP = 0;
        TCP = 1;
        UDP = 2;
}

// A network handler that is being used by implants to get necessary
// handler information, including more specific details. This helps reducing the
// number of handlers to add for an implant, and only a packge will handle these.
message Handler {
  HandlerType Type = 1;
  TransportProtocol Transport = 2;
  ApplicationProtocol Application = 3;

  string RHost = 4;
  int32 RPort = 5;
  string LHost = 6;
  int32 LPort = 7;

  string ID = 8; // A handler always has at least one ID , provided by the server.

  HandlerSecurity Security = 9;
}

// Any security details, such as encryption keys and auth.
message HandlerSecurity {
  bytes CACertPEM = 4;
  bytes CertPEM = 5;
  bytes KeyPEM = 6;
}

// The server requests an implant/the server to start a handler.
message HandlerStartReq {
  Handler Handler = 1;
  commonpb.Request Request = 9;
}

// Response
message HandlerStart {
  bool Success = 1;
  bool IsPlatformCompatible = 2;
  commonpb.Response Response = 9;
}

// The server requests an implant/the server to stop a handler.
message HandlerCloseReq {
  Handler Handler = 1;
  commonpb.Request Request = 9;
}

// Response
message HandlerClose {
  bool Success = 1;
  bool IsPlatformCompatible = 2;
  commonpb.Response Response = 9;
}


// Network Routes --------------------------------------------------------------

message Route {
  string ID = 1;
  string IP = 2;
  string IPNet = 3;
  string Mask = 4;
  Node Gateway = 5;
  repeated Node Nodes = 6;
  repeated ConnectionInfo Connections = 7;
  uint32 SessionID = 8; // Used by consoles to specify.
  string Timeout = 9;
}

// ConnectionInfo - network/src/dst of a connection routed/to be routed.
message ConnectionInfo {
  string ID = 1;
  TransportProtocol Transport = 2;
  ApplicationProtocol Application = 3;
  string RHost = 4;
  int32 RPort = 5;
  string LHost = 6;
  int32 LPort = 7;
  int32  Timeout = 8;
}

message Node {
  uint32 ID = 1;
  string Name = 2;
  string Host = 3;
  string Hostname = 4;
}

message  RoutesReq {
  string Addr = 1;
  commonpb.Request Request = 9;
}

message Routes {
  repeated Route Active = 1;    
}

message AddRouteReq {
  Route Route = 1;
  commonpb.Request Request = 9;
}

message AddRoute {
  bool Success = 1;
  commonpb.Response Response = 9;
}

message RmRouteReq {
  Route Route = 1; 
  bool Close = 2;
  commonpb.Request Request = 9;
}

message RmRoute {
  bool Success = 1;
  string CloseError = 2;
  commonpb.Response Response = 9;
}


// Comm routing & multiplexing ------------------------------------------------

message CommTunnelOpenReq {
  uint64 TunnelID = 1;
  commonpb.Request Request = 9;
}

message CommTunnelOpen {
  bool Success = 1;
  commonpb.Response Response = 9;
}

message CommTunnelData {
  bytes Data  = 1;
  bool Closed = 2;
  uint64 Sequence = 3;

  uint64 TunnelID = 8 [jstype = JS_STRING];
  uint32 SessionID = 9;
}

message CommTunnelCloseReq {
  uint64 TunnelID = 1;
  commonpb.Request Request = 9;
}

message CommTunnelClose {
  bool Success = 1;
  commonpb.Response Response = 9;
}
